<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Author" content="Nacho">
   <meta name="GENERATOR" content="Microsoft FrontPage 4.0">
   <title>Tema 1: Introducci&oacute;n a Java</title>
<link rel="stylesheet" href="../../apuntes.css" type="text/css">
</head>
<body>

<h2>1.4. Entornos de Desarrollo Java</h2>
             
<p>Veremos a continuaci&oacute;n ejemplos de entornos de desarrollo utilizados 
    para escribir, compilar y ejecutar programas Java. </p>
             
<h3>&nbsp;</h3>
             
<h3>1.4.1. La consola: JDK</h3>
             
<p>El m&eacute;todo m&aacute;s directo (y a veces m&aacute;s costoso) de programar
en Java es utilizar directamente los programas que proporciona la distribuci&oacute;n
<b>JDK</b> (<i>Java Development Kit</i>) de <i>Sun. </i>Es necesario tener
instalada esta distribuci&oacute;n para poder trabajar con otros entornos
de desarrollo, puesto que dichos entornos se apoyan en la API de clases que
viene con JDK.</p>
     
<p>La <b>instalación </b>es bastante inmediata (tanto en Windows como en Linux).
En windows habrá que elegir el directorio donde instalar, y en Linux en general
se descomprime en el lugar que se quiera. También es
recomendable instalar (descomprimir) la <b>documentación</b> de la API</p>
     
<blockquote>         
             
<p><a name="entorno"></a><b>Variables de entorno</b> </p>
             
<p>Para su correcto funcionamiento, Java necesita tener establecidas algunas 
    variables de entorno: las variables <b>PATH</b> y <b>CLASSPATH</b>. </p>
             
<p>La variable
  de  entorno del sistema <b>PATH</b> deber&aacute; contener la ruta donde
 se encuentren los programas para compilar y ejecutar con JDK (<i>javac </i>y <i>java</i>,
respectivamente). Por ejemplo: </p>
             
 <font face="Courier New,Courier">   
<pre class="codigo">set PATH=%PATH%;C:\jdk1.4\bin		
(Windows)
export PATH=$PATH:/jdk1.4/bin		
(Linux)</pre>
   </font>         
   
  <p>Con la variable  <b>CLASSPATH</b> indicamos dónde están las clases
  externas a las de la API que utilicemos. Por ejemplo, si 
 están  en <font size="-1">\misclases</font>
 :&nbsp; </p>
             
<pre class="codigo">set CLASSPATH=%CLASSPATH%;C:\misclases	
(Windows)
export CLASSPATH=$CLASSPATH:/misclases	
(Linux)</pre>
             
<p>Si las clases pertenecen a un paquete concreto, se debe apuntar al directorio a partir del cual comienzan los directorios del
  paquete. Por ejemplo, si la clase <i>MiClase</i> est&aacute; en el paquete <i>unpaquete</i>, dentro 
de <i>\misclases</i> (<i>\misclases\unpaquete\MiClase.class</i>):</p>
 
<pre class="codigo">set CLASSPATH=%CLASSPATH%;C:\misclases	
(Windows)
export CLASSPATH=$CLASSPATH:/misclases	
(Linux)</pre>
 
<p>Si las clases est&aacute;n 
    empaquetadas en un fichero&nbsp;<i>JAR</i>, se tendr&aacute;    que hacer 
 referencia a dicho fichero. Por ejemplo: </p>
             
<pre class="codigo">set CLASSPATH=%CLASSPATH%;C:\misclases\misclases.jar
(Windows)
export CLASSPATH=$CLASSPATH:/misclases/misclases.jar
(Linux)</pre>
             
<p>Nunca est&aacute; de m&aacute;s incluir en el CLASSPATH el directorio actual:</p>
     
<pre class="codigo">set CLASSPATH=%CLASSPATH%;.	
(Windows)
export CLASSPATH=$CLASSPATH:.
(Linux)</pre>
     
<p>&nbsp;</p>
           
<p>Las expresiones %VARIABLE% (en Windows) o $VARIABLE en (Linux) se utilizan
para no sobreescribir el contenido anterior de la variable, sino añadirle lo
que se ponga además de dicha expresión. Los distintos ficheros/directorios
asignados a cada variable se separan con ';' (en Windows) o con ':' (en Linux).&nbsp;</p>
           
<p>Para hacer estos cambios permanentes deberemos modificar los ficheros de
autoarranque de cada sistema operativo, añadiendo las líneas correspondientes
en <i>autoexec.bat</i> (para Windows) o <i>/etc/profile</i> (para Linux).</p>
           
<p>La forma de establecer las variables cambia en función de la versión de
Windows o Linux. Por ejemplo, en Windows 2000 o XP se pueden establecer
variables de entorno directamente desde el panel de control. Y en versiones
distintas de Linux se utilizan distintos shells con comandos de establecimiento
distintos al <i>export</i>.</p>
           
  <p>&nbsp;</p>
           
  <p><b>Compilar y ejecutar clases</b></p>
   Si queremos compilar el siguiente <a href="ejemplos/entornos/ejemplo1.zip">
   fichero ejemplo</a>
   , se compila con <b>javac</b>:</blockquote>
           
  <blockquote>          
           
    <pre class="codigo">javac Persona.java</pre>
      </blockquote>
                       
    <blockquote>                   
      <p>Tras haber compilado el ejemplo se tendr&aacute; un fichero <font size="-1">
   Persona.class</font>     . Ejecutamos el programa con <b>java</b>
  :     </p>
       </blockquote>
                             
      <blockquote>                  
                   
        <pre class="codigo">java Persona</pre>
          </blockquote>
                                 
        <blockquote>Si se quisieran pasar par&aacute;metros al programa (este 
 ejemplo no pide par&aacute;metros), se pasan despu&eacute;s de la clase:
                             
          <pre class="codigo">java Persona 20 56 Hola</pre>
          <p>También podemos ejecutar un fichero JAR, si contiene una clase
          principal. Para ello pondremos:</p>
                               
          <pre class="codigo">java -jar Fichero.jar</pre>
          <p>Compilamos ahora el siguiente <a href="ejemplos/entornos/ejemplo2.zip">
   fichero ejemplo</a>
   , que utiliza algunas clases m&aacute;s aparte de la principal. En este
 caso se utilizan varias clases, y una que est&aacute; en un fichero JAR. Hay que incluir 
 en el CLASSPATH el fichero JAR (las otras no porque están en el mismo
          directorio):</p>
                               
          <pre class="codigo">set CLASSPATH=%CLASSPATH%;.\maspersonas.jar
(Windows)
export CLASSPATH=$CLASSPATH:./maspersonas.jar
(Linux)</pre>
   Luego se compila y ejecuta igual que en el ejemplo anterior
          <p>Notar que para compilar se pone la extensi&oacute;n del fichero (<i>.java</i>
   ), pero para ejecutar no se pone la extensi&oacute;n <i>.class</i>. Los
   nombres  de ficheros que pasemos para compilar y ejecutar <b>deben coincidir 
   en may&uacute;sculas y min&uacute;sculas</b> con los nombres reales. También
          notar que al compilar una clase, se compilan autom&aacute;ticamente 
 todas las otras clases que utiliza internamente (en este ejemplo, al compilar 
       <i>Persona</i> se compilan tambi&eacute;n <i>Elefante</i> y <i>Mosca</i>
   , que est&aacute;n en las carpetas <i>animales</i> e <i>insectos</i>,
respectivamente).   Si alguna clase que necesitemos no se compila, deberemos
compilarla a mano  despu&eacute;s.</p>
                               
          <p>&nbsp;</p>
                               
         </blockquote>
                                       
          
<h3>1.4.2. Elaboraci&oacute;n de entornos gr&aacute;ficos: Forte</h3>
                                                         
<p>Esta herramienta tiene su utilidad 
 sobre todo    a la hora de realizar aplicaciones que contengan entornos gr&aacute;ficos
    (ventanas, men&uacute;s, etc). Como inconveniente,
 necesita <b>muchos requerimientos</b> del sistema (memoria  y velocidad
de  procesamiento) </p>
                                                         
                <div align="center"><img border="0" src="imagenes/introduccion/forte.jpg" width="550" height="310">
    </div>
                                                 
<p class="caption">Figura 1. Ventana principal de Forte</p>
                                                 
                
<p>En la parte superior se tienen los men&uacute;s y barras de herramientas. Se 
  tienen pesta&ntilde;as para editar c&oacute;digo (<i>Editing</i>), editar formularios 
  (<i>GUI Editing</i> ), mostrar la salida de ejecuci&oacute;n (<i>Running</i>), 
  etc. En la parte izquierda se tienen los proyectos y ficheros que se manejan, 
  y en la derecha se tienen los formularios y c&oacute;digo que se realice.<br>
               </p>
                                                 
                <p>Se puede obtener m&aacute;s informaci&oacute;n sobre Forte 
 en las p&aacute;ginas    de Sun:</p>
                                                 
                <p><a href="http://forte.sun.com/ffj/index.html">http://forte.sun.com/ffj/index.html</a>
               <br>
               <a href="http://forte.sun.com/ffj/documentation/index.html">
  http://forte.sun.com/ffj/documentation/index.html</a>
               </p>
                                                 
<p>Para <b>instalarlo </b>se debe instalar antes JDK 1.3.1 o posterior, y luego
seguir las instrucciones que se indiquen en la instalación. Tras instalar, al
arrancar el programa por primera vez se completa la instalación.</p>
                                                           
                  <blockquote>                                          
                
                    <p><b>Proyectos</b></p>
                    <p>
      Con Forte tambi&eacute;n podemos definir <b>proyectos</b>, aunque la
 forma de gestionarlos es distinta a JCreator. Forte trabaja con proyectos
 (<i>Projects</i>) y sistemas de ficheros (<i>Filesystems</i>), de modo
que  un proyecto engloba sistemas de ficheros. <br>
                   <br>
   Podremos crear nuevos proyectos o abrir proyectos existentes desde el
                    <i>   Project Manager</i> del men&uacute; <i>Project</i>
. Para gestionar los sistemas  de ficheros, en la pesta&ntilde;a <i>Filesystems</i>
 de la parte izquierda  podremos cargar directorios o ficheros JAR, pulsando con el botón derecho sobre <i>Filesystems
                    </i>y eligiendo la opción del menú <i>Mount</i>. Luego
desde la pesta&ntilde;a                  <i>Project</i> podemos a&ntilde;adir
los                     <i>Filesystems</i>   que consideremos al proyecto
(opci&oacute;n                     <i>Add Existing</i> con el bot&oacute;n
derecho).<br>
                                                             
                    </p>
                    <p><b>Compilar y ejecutar clases</b>
                                                             
                    </p>
                    <p>Compilamos el siguiente <a href="ejemplos/entornos/ejemplo1.zip">
        fichero ejemplo</a>
   . Para ello lo abrimos con Forte. Nos dir&aacute; que      lo coloca en
 el paquete por defecto. Luego, para compilarlo se tiene la opci&oacute;n
     <i>Compile </i>del men&uacute; <i>Build</i>.&nbsp;Para
ejecutar elegimos la opci&oacute;n <i>
 Execute                     </i>del men&uacute;      <i>Build</i>.
                                                             
                    </p>
      </blockquote>
                                             
                    <blockquote>                                        
      
                      <p>
   Compilamos ahora el siguiente <a href="ejemplos/entornos/ejemplo2.zip">
   fichero ejemplo</a>
     . Creamos un proyecto <i>Proyecto2</i>, y le a&ntilde;adimos el directorio 
 donde tenemos las clases, y aparte el fichero JAR que contiene (como un <i>Filesystem</i>
   aparte). Para compilar el proyecto elegimos la opci&oacute;n <i>Compile Project</i>
    del men&uacute; <i>Project</i>, y para ejecutarlo 
 elegimos la opci&oacute;n <i>Execute Project</i> del men&uacute; <i>Project</i>. Podemos establecer 
 la clase principal del proyecto con la opci&oacute;n <i>Set Main Class</i>
    del men&uacute; <i>Project</i>.<br>
                     <br>
                      </p>
                     </blockquote>
                                                                   
                      
<h3>1.4.3. Otros entornos</h3>
                                       
<blockquote>
                                       
          
<h3>1.4.3.1. JCreator</h3>
                                       
  <p>JCreator es una herramienta que no da tantas posibilidades como Forte, pero
  permite editar, compilar y ejecutar código Java. Su apariencia es la
  siguiente:&nbsp;</p>
                               
</blockquote>
                               
          <div align="Center">                             
          <blockquote>
          <img alt=" " src="imagenes/introduccion/jcreator.jpg" width="510" height="310">   
   	                        
          <p class="caption">Figura 2. Ventana principal de JCreator</p>
	  </div>
                               
          <div align="Left">                             
          <p>En la parte superior est&aacute;n los men&uacute;s y barras
de herramientas. A la izquierda se tienen las clases y proyectos
 que se tengan, y los campos y métodos de la clase seleccionada. La zona derecha es
el  editor de texto, donde se ver&aacute; el c&oacute;digo de las clases
que se tengan. Abajo se muestran los resultados.</p>
         </div>
                               
          <div align="Left">                             
          <h3>1.4.3.2. Kawa</h3>
                                       
          <p>Kawa es una herramienta muy parecida a JCreator en cuanto a
          funcionalidades. Su apariencia es la siguiente:&nbsp;</p>
                               
         </div>
                               
          </blockquote>
          <div align="center"><img border="0" src="imagenes/introduccion/kawa.jpg" width="457" height="309">
        </div>
   	                        
          <blockquote>
                               
          <div align="Center">                             
          <blockquote>
   	                        
            <p class="caption">Figura 3. Ventana principal de Kawa</p>
                               
          </blockquote>
                               
          <div align="Left">                             
          <p>En la parte superior est&aacute;n los men&uacute;s y barras
de herramientas. A la izquierda se tienen las clases y proyectos
 que se tengan. La zona derecha es
el  editor de texto, y abajo se muestran los resultados.</p>
         </div>
                               
         </div>
                               
          <div align="Left">                             
          <p>&nbsp;</p>
         </div>
                               
          </blockquote>
         </div>
                               
                      
<h2>1.5. Introducción a los Applets</h2>
<p>
Un <b>applet </b>es una aplicaci&oacute;n normalmente corta (aunque no
hay l&iacute;mite de tama&ntilde;o), cuya principal funcionalidad es ser
accesible a un servidor Internet (una aplicaci&oacute;n que pueda visualizarse
desde un navegador). Para ello se carga la clase del applet en un fichero
HTML, mediante c&oacute;digo como:</p>
<pre class="codigo">&lt;HTML&gt;
&lt;BODY&gt;
...
&lt;APPLET CODE = nombre_prog.class WIDTH = 300 HEIGHT = 100&gt;
&lt;/APPLET&gt;
...
&lt;/BODY&gt;
&lt;/HTML&gt;</pre>
Aqu&iacute; tenemos un ejemplo:
<center>
                                             
                    <blockquote>                                        
      
<p><a href="ejemplos/entornos/EjemploApplet.java.txt">C&oacute;digo</a>&nbsp;&nbsp;&nbsp;&nbsp;
<a href="ejemplos/entornos/EjemploApplet.html" target="_blank">Applet</a></center>

                     </blockquote>
                                                                   
                      
<p>El <b>appletviewer </b>es un navegador m&iacute;nimo proporcionado con
Java, que espera como argumento el fichero HTML donde est&aacute; el applet
que se cargar&aacute;:
<pre class="codigo">appletviewer nombre_prog.html</pre>
                                             
                      
</body>
</html>
