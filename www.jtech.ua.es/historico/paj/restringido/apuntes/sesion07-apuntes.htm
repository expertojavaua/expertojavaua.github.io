<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Author" content="Nacho">
   <meta name="GENERATOR" content="Microsoft FrontPage 4.0">
   <title>Tema 3: Interfaz Gr&aacute;fica</title>
<link rel="stylesheet" href="../../apuntes.css" type="text/css">
</head>
<body>

<h1>3. Interfaz Gráfica</h1>
<h2>&nbsp;</h2>
<h2>3.1. AWT</h2>

<h4>&nbsp;</h4>
<h3>3.1.1. Introducción a AWT</h3>

<p><b>AWT</b> (<i>Abstract Windows Toolkit</i>) es la parte de Java
que se emplea para construir <b>interfaces gr&aacute;ficas</b> de usuario.
Este paquete ha estado presente desde la primera versi&oacute;n (la 1.0),
aunque con la 1.1 sufri&oacute; un cambio notable. En la versi&oacute;n
1.2 se incorpor&oacute; tambi&eacute;n a Java una librer&iacute;a adicional,
<b>Swing</b>,
que enriquece a AWT en la construcci&oacute;n de aplicaciones gr&aacute;ficas.
<br>&nbsp;
<p><b>Controles de AWT</b>
<p>
Java proporciona una serie de <b>controles</b> que podremos colocar en
las aplicaciones visuales que implementemos. Dichos controles son subclases
de la clase <b>Component</b>, y forman parte del paquete
<b>java.awt</b>
. Las m&aacute;s comunes son:

</p><center>
<img SRC="imagenes/awtswing/AWTcontroles.jpg" ALT="" NOSAVE height=232 width=550></center>


<p class="caption">Figura 1. Estructura de clases de AWT
<p>Los controles s&oacute;lo se ver&aacute;n si los a&ntilde;adimos sobre
un contenedor. Para ello
utilizamos el m&eacute;todo <b>add(...)</b> del contenedor para a&ntilde;adir
el control. Por ejemplo, si queremos a&ntilde;adir un bot&oacute;n a un
<i>Panel</i>:
<pre class="codigo">Button boton = new Button(&quot;Pulsame&quot;);
Panel panel = new Panel();
...
panel.add(boton);</pre>

<center><table BORDER="1" WIDTH="548" >
<caption>
</caption><center>
<tbody>
</tbody></center>

<tr>
<td ALIGN=CENTER WIDTH="202"><b>Component</b></td>

<td width="410">La clase padre <i>Component</i> no se puede utilizar directamente.
Es una clase abstracta, que proporciona algunos m&eacute;todos &uacute;tiles
para sus subclases.&nbsp;</td>
</tr>

<tr>
<td ALIGN=CENTER width="202"><b>Botones</b>
<br><img SRC="imagenes/awtswing/AWTbutton.jpg" ALT="" NOSAVE height=70 width=114></td>

<td width="410">Para emplear la clase <b>Button</b>, en el constructor simplemente
indicamos el texto que queremos que tenga :&nbsp;
<pre class="codigo">Button boton = new Button(&quot;Pulsame&quot;);</pre>
</td>
</tr>

<tr>
<td ALIGN=CENTER width="202"><b>Etiquetas</b>
<br><img SRC="imagenes/awtswing/AWTlabel.jpg" ALT="" NOSAVE height=62 width=132></td>

<td width="410">Para utilizar <b>Label</b>, el uso es muy similar al bot&oacute;n:
se crea el objeto con el texto que queremos darle:&nbsp;
<pre class="codigo">Label etiq = new Label(&quot;Etiqueta&quot;);</pre>
</td>
</tr>

<tr>
<td ALIGN=CENTER width="202"><b>Areas de dibujo</b></td>

<td width="410">La clase <b>Canvas</b> se emplea para heredar de ella y crear componentes
personalizados.&nbsp;
<br>Accediendo al objeto <i>Graphics</i> de los elementos podremos darle
la apariencia que queramos: dibujar l&iacute;neas, pegar im&aacute;genes,
etc:
<pre class="codigo">Panel p = new Panel();
p.getGraphics().drawLine(0, 0, 100, 100);
p.getGraphics().drawImage(...);</pre>
</td>
</tr>

<tr>
<td ALIGN=CENTER width="202"><b>Casillas de verificaci&oacute;n</b>
<br><img SRC="imagenes/awtswing/AWTcheckbox.jpg" ALT="" NOSAVE height=91 width=90></td>

<td width="410"><b>Checkbox</b> se emplea para marcar o desmarcar opciones. Podremos
tener controles aislados, o grupos de <i>Checkboxes </i>en un objeto <b>CheckboxGroup</b>, de forma que s&oacute;lo una de las casillas del grupo pueda&nbsp; marcarse
cada vez.&nbsp;
<pre class="codigo">Checkbox cb = new Checkbox
              (&quot;Mostrar subdirectorios&quot;, 
              false);
System.out.println (&quot;Esta marcada: &quot; + 
                    cb.getState());</pre>
</td>
</tr>

<tr>
<td ALIGN=CENTER width="202"><b>Listas</b>
<br><img SRC="imagenes/awtswing/AWTchoice.jpg" ALT="" NOSAVE height=70 width=126>
<br><img SRC="imagenes/awtswing/AWTlist.jpg" ALT="" NOSAVE height=97 width=142></td>

<td width="410">Para utilizar una <b>lista desplegable</b> (objeto <b>Choice</b> ),
se crea el objeto y se a&ntilde;aden, con el m&eacute;todo <b>addItem(...)</b>
, los elementos que queramos a la lista:&nbsp;
<pre class="codigo">Choice ch = new Choice();
ch.addItem(&quot;Opcion 1&quot;);
ch.addItem(&quot;Opcion 2&quot;);
...
int i = ch.getSelectedIndex();</pre>
Para utilizar <b>listas fijas</b> (objeto <b>List</b>), en el constructor
indicamos cu&aacute;ntos elementos son visibles. Tambi&eacute;n podemos
indicar si se permite seleccionar varios elementos a la vez. Dispone de
muchos de los m&eacute;todos que tiene <i>Choice</i> para a&ntilde;adir
y consultar elementos.&nbsp;
<pre class="codigo">List lst = new List(3, true);
lst.addItem(&quot;Opcion 1&quot;);
lst.addItem(&quot;Opcion 2&quot;);</pre>
</td>
</tr>

<tr>
<td ALIGN=CENTER width="202"><b>Cuadros de texto</b>
<br><img SRC="imagenes/awtswing/AWTtextfield.jpg" ALT="" NOSAVE height=46 width=74>
<img SRC="imagenes/awtswing/AWTtextarea.jpg" ALT="" NOSAVE height=89 width=127></td>

<td width="410">Al trabajar con <b>TextField</b> o <b>TextArea</b>, se indica opcionalmente
en el constructor el n&uacute;mero de columnas (y filas en el caso de <i>TextArea</i>)
que se quieren en el cuadro de texto.&nbsp;
<pre class="codigo">TextField tf = new TextField(30);
TextArea ta = new TextArea(5, 40);
...
tf.setText(&quot;Hola&quot;);
ta.appendText(&quot;Texto 2&quot;);
String texto = ta.getText();</pre>
</td>
</tr>

<tr>
<td ALIGN=CENTER width="202"><b>Men&uacute;s</b>
<br><img SRC="imagenes/awtswing/AWTmenu.jpg" ALT="" NOSAVE height=138 width=149></td>

<td width="410">Para utilizar men&uacute;s, se emplea la clase <b>MenuBar</b> (para
definir la barra de men&uacute;), <b>Menu</b> (para definir cada men&uacute;),
y <b>MenuItem</b> (para cada opci&oacute;n en un men&uacute;). Un men&uacute;
podr&aacute; contener a su vez submen&uacute;s (objetos de tipo <i>Menu</i>
). Tambi&eacute;n est&aacute; la clase <b>CheckboxMenuItem</b> para definir
opciones de men&uacute; que son casillas que se marcan o desmarcan.&nbsp;
<pre class="codigo">MenuBar mb = new MenuBar();
Menu m1 = new Menu &quot;Menu 1&quot;);
Menu m11 = new Menu (&quot;Menu 1.1&quot;);
Menu m2 = new Menu (&quot;Menu 2&quot;);
MenuItem mi1 = new MenuItem (&quot;Item 1.1&quot;);
MenuItem mi11=new MenuItem (&quot;Item 1.1.1&quot;);
CheckboxMenuItem mi2 = 
   new CheckboxMenuItem(&quot;Item 2.1&quot;);
mb.add(m1);
mb.add(m2);
m1.add(mi1);
m1.add(m11);
m11.add(mi11);
m2.add(mi2);</pre>
Mediante el m&eacute;todo <i>setMenuBar(...)</i> de Frame podremos a&ntilde;adir
un men&uacute; a una ventana:
<pre class="codigo">Frame f = new Frame();
f.setMenuBar(mb);</pre>
</td>
</tr>
</table>

  <h2 align="left">&nbsp; </h2>
  <h3 align="left"> <a NAME="disposicion"></a>3.1.2. Gestores de disposición</h3>
  <p align="left"> Para colocar los controles Java en los contenedores se hace 
    uso de un determinado <b>gestor de disposici&oacute;n</b>. Dicho gestor indica 
    c&oacute;mo se colocar&aacute;n los controles en el contenedor, siguiendo 
    una determinada distribuci&oacute;n. Para establecer qu&eacute; gestor queremos, 
    se emplea el m&eacute;todo <i> setLayout(...)</i> del contenedor. Por ejemplo:</p>
  <div align="left" style="width: 553; height: 823">
    <pre class="codigo">Panel panel = new Panel();
panel.setLayout(new BorderLayout());</pre>
    Veremos ahora los gestores m&aacute;s importantes: 
    <table BORDER="1" WIDTH="552" >
      <caption></caption>
      <tbody> </tbody> 
      <tr> 
        <td ALIGN=CENTER WIDTH="259"><b>BorderLayout</b> <br>
          <img SRC="imagenes/awtswing/AWTborderlayout.jpg" ALT="" NOSAVE height=132 width=189> 
          <br>
          (gestor por defecto para contenedores tipo <i>Window</i>)</td>
        <td width="356">Divide el &aacute;rea del contenedor en 5 zonas: Norte (<i> NORTH</i> 
          ), Sur (<i>SOUTH</i>), Este (<i>EAST</i>), Oeste (<i>WEST</i>) y Centro 
          (<i>CENTER</i>), de forma que al colocar los componentes deberemos indicar 
          en el m&eacute;todo <i>add(...)</i> en qu&eacute; zona colocarlo:&nbsp;
          <pre class="codigo">panel.setLayout(new BorderLayout());
Button btn = new Button(&quot;Pulsame&quot;);
panel.add(btn, BorderLayout.SOUTH);</pre>
          Al colocar un componente en una zona, se colocar&aacute; sobre el que 
          existiera anteriormente en dicha zona (lo tapa).&nbsp;</td>
      </tr>
      <tr> 
        <td ALIGN=CENTER width="259"><b>FlowLayout</b> <br>
          <img SRC="imagenes/awtswing/AWTflowlayout.jpg" ALT="" NOSAVE height=40 width=199> 
          <br>
          (gestor por defecto para contenedores de tipo <i>Panel</i>)</td>
        <td width="356">Con este gestor, se colocan los componentes en fila, uno detr&aacute;s 
          de otro, con el tama&ntilde;o preferido (<i>preferredSize</i> ) que 
          se les haya dado. Si no caben en una fila, se utilizan varias.&nbsp; 
          <pre class="codigo">panel.setLayout(new FlowLayout());
panel.add(new Button(&quot;Pulsame&quot;));</pre>
        </td>
      </tr>
      <tr> 
        <td ALIGN=CENTER width="259"><b>GridLayout</b> <br>
          <img SRC="imagenes/awtswing/AWTgridlayout.jpg" ALT="" NOSAVE height=126 width=135></td>
        <td width="356">Este gestor sit&uacute;a los componentes en forma de tabla, dividiendo 
          el espacio del contenedor en celdas del mismo tama&ntilde;o, de forma 
          que el componente ocupa todo el tama&ntilde;o de la celda.&nbsp; <br>
          Se indica en el constructor el n&uacute;mero de filas y de columnas. 
          Luego, al colocarlo, va por orden (rellenando filas de izquierda a derecha).&nbsp; 
          <pre class="codigo">panel.setLayout(new GridLayout(2,2));
panel.add(new Button(&quot;Pulsame&quot;));
panel.add(new Label(&quot;Etiqueta&quot;));</pre>
        </td>
      </tr>
      <tr> 
        <td ALIGN=CENTER width="259"><b>Sin gestor</b></td>
        <td width="356">Si especificamos un gestor <b><i>null</i></b>, podremos colocar a 
          mano los componentes en el contenedor, con m&eacute;todos como <b>setBounds(...)</b> 
          , o <b>setLocation(...)</b>:&nbsp; 
          <pre class="codigo">panel.setLayout(null);
Button btn = new Button (&quot;Pulsame&quot;);
btn.setBounds(0, 0, 100, 30);
panel.add(btn);</pre>
        </td>
      </tr>
    </table>
  </div>
  <p align="left"><b>Ejemplo</b>: Vemos el aspecto de algunos componentes de AWT, 
    y el uso de gestores de disposici&oacute;n en este ejemplo: 
  <div align="center"><img SRC="imagenes/awtswing/AWTejemplo.jpg" NOSAVE height=317 width=399> </div>
  <div align="center"><a href="ejemplos/awt/EjemploAWT.java.txt">C&oacute;digo</a></div>
  <div align="left">&nbsp;</div>
  <h3 align="left"> <a NAME="eventos"></a>3.1.3. Modelo de Eventos en Java</h3>
  <p align="left"> Entendemos por <b>evento</b> una acci&oacute;n o cambio en 
    una aplicaci&oacute;n que permite que dicha aplicaci&oacute;n produzca una 
    respuesta.&nbsp; El <b>modelo de eventos</b> de AWT se descompone en dos grupos 
    de elementos: las fuentes y los oyentes de eventos. Las <b>fuentes</b> son 
    los elementos que generan los eventos (un bot&oacute;n, un cuadro de texto, 
    etc), mientras que los <b>oyentes</b> son elementos que est&aacute;n a la 
    espera de que se produzca(n) determinado(s) tipo(s) de evento(s) para emitir 
    determinada(s) respuesta(s).</p>
  <p align="left">Para poder gestionar eventos, necesitamos definir el <b>manejador 
    de eventos</b> correspondiente, un elemento que act&uacute;e de oyente sobre 
    las fuentes de eventos que necesitemos considerar. Cada tipo de evento tiene 
    asignada una <b>interfaz</b>, de modo que para poder gestionar dicho evento, 
    el manejador deber&aacute; implementar la interfaz asociada. Los oyentes m&aacute;s 
    comunes son: 
  <div align="left">
    <table BORDER="1" WIDTH="83%" >
      <caption></caption>
      <tbody> </tbody> 
      <tr> 
        <td WIDTH="19%"> 
          <center>
            <b>ActionListener</b>
          </center>
        </td>
        <td WIDTH="81%">Para eventos de acci&oacute;n (pulsar un <i>Button</i> 
          , por ejemplo)</td>
      </tr>
      <tr> 
        <td WIDTH="19%"> 
          <center>
            <b>ItemListener</b>
          </center>
        </td>
        <td WIDTH="81%">Cuando un elemento (<i>Checkbox</i>, <i>Choice</i> , etc), 
          cambia su estado</td>
      </tr>
      <tr> 
        <td WIDTH="19%"> 
          <center>
            <b>KeyListener</b>
          </center>
        </td>
        <td WIDTH="81%">Indican una acci&oacute;n sobre el teclado: pulsar una 
          tecla, soltarla, etc.</td>
      </tr>
      <tr> 
        <td WIDTH="19%"> 
          <center>
            <b>MouseListener</b>
          </center>
        </td>
        <td WIDTH="81%">Indican una acci&oacute;n con el rat&oacute;n que no implique 
          movimiento del mismo: hacer click, presionar un bot&oacute;n, soltarlo, 
          entrar / salir...</td>
      </tr>
      <tr> 
        <td WIDTH="19%"> 
          <center>
            <b>MouseMotionListener</b>
          </center>
        </td>
        <td WIDTH="81%">Indican una acci&oacute;n con el rat&oacute;n relacionada 
          con su movimiento: moverlo por una zona determinada, o arrastrar el 
          rat&oacute;n.</td>
      </tr>
      <tr> 
        <td WIDTH="19%"> 
          <center>
            <b>WindowListener</b>
          </center>
        </td>
        <td WIDTH="81%">Indican el estado de una ventana</td>
      </tr>
    </table>
  </div>
  <p align="left">Cada uno de estos tipos de evento puede ser producido por diferentes 
    fuentes.&nbsp; 
  <p align="left">&nbsp; 
  <p align="left"><b>Modos de definir un oyente</b></p>
  <p align="left">Supongamos que queremos realizar una acci&oacute;n determinada 
    al pulsar un bot&oacute;n. En este caso, tenemos que asociar un <i>ActionListener</i> 
    a un objeto <i>Button</i>. Veremos c&oacute;mo podemos hacerlo:</p>
  <p align="left"><b>1. Que la propia clase que usa el control implemente el oyente</b> 
  <div align="left">
    <pre class="codigo">class MiClase implements ActionListener
{
&nbsp;&nbsp;&nbsp; public MiClase()
&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Button btn = new Button(&quot;Boton&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; btn.addActionListener(this);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...
&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e)
&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Aqui va el codigo de la accion
&nbsp;&nbsp;&nbsp; }
}</pre>
    <b>2. Definir otra clase aparte que implemente el oyente</b> 
    <pre class="codigo">class MiClase
{
&nbsp;&nbsp;&nbsp;&nbsp; public MiClase()
&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Button btn = new Button(&quot;Boton&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; btn.addActionListener(new MiOyente());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...
&nbsp;&nbsp;&nbsp;&nbsp; }
}

class MiOyente implements ActionListener
{
&nbsp;&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e)
&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Aqui va el codigo de la accion
&nbsp;&nbsp;&nbsp;&nbsp; }
}</pre>
    <b>3. Definir una instancia interna del oyente</b> 
    <pre class="codigo">class MiClase
{
&nbsp;&nbsp;&nbsp;&nbsp; public MiClase()
&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Button btn = new Button(&quot;Boton&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; btn.addActionListener(new ActionListener()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Aqui va el codigo de la accion
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...
&nbsp;&nbsp;&nbsp; }
}</pre>
    &nbsp; </div>
  <p align="left"><b>Uso de los &quot;adapters&quot;</b></p>
  <p align="left"> Algunos de los oyentes disponibles (como por ejemplo <i>MouseListener</i> 
    ) tienen varios m&eacute;todos que hay que implementar si queremos definir 
    el oyente. Este trabajo puede ser bastante pesado e innecesario si sólo queremos 
    usar algunos métodos.</p>
  <p align="left">Una soluci&oacute;n a esto es el uso de los <i>adapters</i>. 
    Asociado a cada oyente con m&aacute;s de un m&eacute;todo hay una clase ...<i>Adapter</i> 
    (para <i>MouseListener</i> est&aacute; <i>MouseAdapter</i> , para <i>WindowListener</i> 
    est&aacute; <i>WindowAdapter</i>, etc). Estas clases implementan las interfaces 
    con las que se asocian, de forma que se tienen los m&eacute;todos implementados 
    por defecto, y s&oacute;lo tendremos que sobreescribir los que queramos modificar. 
  <p align="left">Veamos la diferencia con el caso de <i>MouseListener</i>, suponiendo 
    que queremos asociar un evento de rat&oacute;n a un <i>Panel</i> para que 
    haga algo al hacer click sobre &eacute;l. 
  <p align="left"><b>1. Mediante Listener:</b> 
  <div align="left">
    <pre class="codigo">class MiClase&nbsp;
{
&nbsp;&nbsp;&nbsp;&nbsp; public MiClase()
&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Panel panel = new Panel();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel.addMouseListener(new MouseListener()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void mouseClicked(MouseEvent e)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Aqui va el codigo de la accion
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void mouseEntered(MouseEvent e)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ... No se necesita
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void mouseExited(MouseEvent e)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ... No se necesita
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void mousePressed(MouseEvent e)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ... No se necesita
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void mouseReleased(MouseEvent e)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ... No se necesita
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...
&nbsp;&nbsp;&nbsp; }
}</pre>
    Vemos que hay que definir todos los m&eacute;todos, aunque muchos queden vac&iacute;os 
    porque no se necesitan. </div>
  <p align="left"><b>2. Mediante Adapter:</b> 
  <div align="left">
    <pre class="codigo">class MiClase&nbsp;
{
&nbsp;&nbsp;&nbsp;&nbsp; public MiClase()
&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Panel panel = new Panel();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel.addMouseListener(new MouseAdapter()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void mouseClicked(MouseEvent e)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Aqui va el codigo de la accion
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...
&nbsp;&nbsp;&nbsp;&nbsp; }
}</pre>
    Vemos que aqu&iacute; s&oacute;lo se a&ntilde;aden los m&eacute;todos necesarios, 
    el resto ya est&aacute;n implementados en <i> MouseAdapter</i> (o en el <i>adapter</i> 
    que corresponda), y no hace falta ponerlos. </div>
  <p align="left"><b>Ejemplo</b>: Vemos el uso de oyentes en este ejemplo:&nbsp;<a href="ejemplos/awt/EjemploAWT2.java.txt">C&oacute;digo</a> 
</center>


<p>&nbsp;</p>


</body>
</html>
