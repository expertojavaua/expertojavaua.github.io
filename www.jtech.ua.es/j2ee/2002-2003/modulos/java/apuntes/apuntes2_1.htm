<html>
<head>
<title>Tema 2: Caracter&iacute;sticas b&aacute;sicas</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="../../../apuntes.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000">
<h1>2. Caracter&iacute;sticas b&aacute;sicas</h1>
<h2>&nbsp; </h2>
<h2><span class="section">2.1. Excepciones </span> </h2>
<p>Las excepciones son eventos que ocurren durante la ejecuci&oacute;n de un programa 
  y hacen que &eacute;ste salga de su flujo normal de instrucciones. Este mecanismo 
  permite tratar los errores de una forma elegante, ya que separa el c&oacute;digo 
  para el tratamiento de errores del c&oacute;digo normal del programa. Se 
  dice que una excepci&oacute;n es <i>lanzada</i> cuando se produce un error, 
  y esta excepci&oacute;n puede ser <i>capturada</i> para tratar dicho error.</p>
<h3 class="subsection">2.1.1. Tipos de excepciones</h3>
<p>Tenemos diferentes tipos de excepciones dependiendo del tipo de error que representen. 
  Todas ellas descienden de la clase <b>Throwable</b>, la cual tiene dos descendientes 
  directos:</p>
<ul>
  <li> <b>Error</b>: Se refiere a errores graves en la m&aacute;quina virtual de Java, 
    como por ejemplo fallos al enlazar con alguna librer&iacute;a. Normalmente en los programas 
    Java no se tratar&aacute;n este tipo de errores.</li>
  <li><b>Exception</b>: Representa errores que no son críticos y por lo tanto pueden ser 
    tratados y continuar la ejecuci&oacute;n de la aplicaci&oacute;n. La mayor&iacute;a 
    de los programas Java utilizan estas excepciones para el tratamiento de los 
    errores que puedan ocurrir durante la ejecuci&oacute;n del c&oacute;digo.</li>
</ul>
<p>Dentro de <b>Exception</b>, cabe destacar una subclase especial de excepciones 
  denominada <b>RuntimeException</b>, de la cual derivar&aacute;n todas aquellas 
  excepciones referidas a los errores que com&uacute;nmente se pueden producir 
  dentro de cualquier fragmento de c&oacute;digo, como por ejemplo hacer una referencia 
  a un puntero <i>null</i>, o acceder fuera de los l&iacute;mites de un <i>array</i>. 
</p>
<p>Estas <b>RuntimeException</b> se diferencian del resto de excepciones en que 
  no son de tipo <i>checked</i>. Una excepci&oacute;n de tipo <i>checked</i> debe 
  ser capturada o bien especificar que puede ser lanzada de forma obligatoria, 
  y si no lo hacemos obtendremos un error de ejecuci&oacute;n. Dado que las <b>RuntimeException</b> 
  pueden producirse en cualquier fragmento de c&oacute;digo, ser&iacute;a impensable 
  tener que a&ntilde;adir manejadores de excepciones y declarar que &eacute;stas 
  pueden ser lanzadas en todo nuestro c&oacute;digo.</p>
<div align="center"><img src="imagenes/basico/excepcion.png" width="491" height="254"></div>
<p align="center" class="caption">Figura 1. Tipos de excepciones</p>
<p>Dentro de estos grupos principales de excepciones podremos encontrar tipos 
  concretos de excepciones o bien otros grupos que a su vez pueden contener m&aacute;s 
  subgrupos de excepciones, hasta llegar a tipos concretos de ellas. Cada tipo 
  de excepci&oacute;n guardar&aacute; informaci&oacute;n relativa al tipo de error 
  al que se refiera, adem&aacute;s de la informaci&oacute;n com&uacute;n a todas 
  las excepciones. Por ejemplo, una <b>ParseException</b>  se suele utilizar al
procesar un fichero. Adem&aacute;s de almacenar 
  un mensaje de error, guardar&aacute; la l&iacute;nea en la que el <i>parser</i> 
  encontr&oacute; el error.</p>
<h3 class="subsection">2.1.2. Captura de excepciones</h3>
<p>Cuando un fragmento de c&oacute;digo sea susceptible de lanzar una excepci&oacute;n 
  y queramos tratar el error producido o bien por ser una excepci&oacute;n de 
  tipo <i>checked</i> debamos capturarla, podremos hacerlo mediante la estructura 
  <i>try-catch-finally</i>, que consta de tres bloques de c&oacute;digo:</p>
<ul>
  <li> Bloque <i>try</i>: Contiene el c&oacute;digo regular de nuestro programa 
    que puede producir una excepci&oacute;n en caso de error.</li>
  <li>Bloque <i>catch</i>: Contiene el c&oacute;digo con el que trataremos el 
    error en caso de producirse.</li>
  <li>Bloque <i>finally</i>: Este bloque contiene el c&oacute;digo que se ejecutar&aacute; 
    al final tanto si se ha producido una excepci&oacute;n como si no lo ha hecho. 
    Este bloque se utiliza para, por ejemplo, cerrar alg&uacute;n fichero que 
    haya podido ser abierto dentro del c&oacute;digo regular del programa, de 
    manera que nos aseguremos que tanto si se ha producido un error como si no 
    este fichero se cierre. El bloque <i>finally</i> no es obligatorio ponerlo.</li>
</ul>
<p>Para el bloque <i>catch</i> adem&aacute;s deberemos especificar el tipo o grupo 
  de excepciones que tratamos en dicho bloque, pudiendo incluir varios bloques 
  <i>catch</i>, cada uno de ellos para un tipo/grupo de excepciones distinto. 
  La forma de hacer esto ser&aacute; la siguiente:</p>
  <pre class="codigo"><b><span class="codigo">try</span></b><span class="codigo"> {
	// Código regular del programa
	// Puede producir excepciones
} <b>catch(TipoDeExcepcion1 e1)</b> {
	// Código que trata las excepciones de tipo 
	// TipoDeExcepcion1 o subclases de ella.
	// Los datos sobre la excepción los encontraremos 
	// en el objeto e1.
} <b>catch(TipoDeExcepcion2 e2)</b> {
</span><span class="codigo">	// Código que trata las excepciones de tipo 
	// TipoDeExcepcion2 o subclases de ella.
	// Los datos sobre la excepción los encontraremos 
	// en el objeto e2.
...
} <b>catch(TipoDeExcepcionN eN)</b> {
</span><span class="codigo">	// Código que trata las excepciones de tipo 
	// TipoDeExcepcionN o subclases de ella.
	// Los datos sobre la excepción los encontraremos 
	// en el objeto eN.
} <b>finally</b> {
	// Código de finalización (opcional)
}</span></pre>
<p>
Si como tipo de excepci&oacute;n especificamos un grupo de excepciones este 
  bloque se encargar&aacute; de la captura de todos los subtipos de excepciones 
  de este grupo. Por lo tanto, si especificamos <b>Exception</b> capturaremos 
  cualquier excepci&oacute;n, ya que est&aacute; es la superclase com&uacute;n 
  de todas las excepciones.

</p>
<p>
En el bloque <i>catch</i> pueden ser útiles algunos métodos de la excepción
(que podemos ver en la API de la clase padre <i>Exception</i>):

</p>
  <pre class="codigo">String getMessage()
void printStackTrace()</pre>
<p>con <b>getMessage()</b> obtenemos una cadena descriptiva del error (si la
hay). Con <b>printStackTrace()</b> se muestra por la salida estándar la traza
de errores que se han producido (en ocasiones la traza es muy larga y no puede
seguirse toda en pantalla con algunos sistemas operativos).

</p>
<p>Un ejemplo de uso:

</p>
<pre class="codigo">try
{
	... // Aqui va el codigo que puede lanzar una excepcion
} catch (Exception e) {
	System.out.println (&quot;El error es: &quot; + e.getMessage());
	e.printStackTrace();
}</pre>
<h3 class="subsection">2.1.3. Lanzamiento de excepciones</h3>
<p>Hemos visto cómo capturar excepciones que se produzcan en el c&oacute;digo, 
  pero en lugar de capturarlas tambi&eacute;n podemos hacer que se propaguen al 
  m&eacute;todo de nivel superior (desde el cual se ha llamado al método actual). Para esto,
en el método donde se vaya a lanzar la excepción, se siguen 2 pasos:</p>
<ul>
  <li>Indicar en el m&eacute;todo que determinados tipos 
  de excepciones o grupos de ellas pueden ser lanzados, cosa que haremos de la siguiente
    forma, por ejemplo:</li>
</ul>
  <pre class="codigo">public void lee_fichero() <b>
throws </b>IOException, FileNotFoundException
{
    // Cuerpo de la función
}</pre>
<blockquote>
<p>Podremos indicar tantos tipos de excepciones como queramos en la claúsula <i><b>throws</b></i>. 
  Si alguna de estas clases de excepciones tiene subclases, tambi&eacute;n se 
  considerar&aacute; que puede lanzar todas estas subclases.</p>
</blockquote>
<ul>
  <li> Para lanzar la excepci&oacute;n utilizamos la instrucci&oacute;n <i><b>throw</b></i>, proporcion&aacute;ndole un objeto correspondiente 
  al tipo de excepci&oacute;n que deseamos lanzar. Por ejemplo:</li>
</ul>
<blockquote>
  <pre class="codigo"><b>throw</b> new IOException(mensaje_error);</pre>
</blockquote>
<ul>
  <li>Juntando estos dos pasos:</li>
</ul>
<blockquote>
  <pre class="codigo">public void lee_fichero() <b>
throws </b>IOException, FileNotFoundException
{
    ...
    throw new IOException(mensaje_error);
    ...
}</pre>
</blockquote>
<p>Podremos lanzar así excepciones en nuestras funciones para indicar 
  que algo no es como debiera ser a las funciones llamadoras. Por ejemplo, si
estamos procesando un fichero que debe tener un determinado formato, ser&iacute;a 
  buena idea lanzar excepciones de tipo <b> ParseException</b> en caso de que la sintaxis 
  del fichero de entrada no sea correcta.&nbsp;</p>
<p>NOTA: para las excepciones que no son de tipo <i> checked</i> no har&aacute; falta
la cláusula <i>throws</i> en la declaración del método, pero seguir&aacute;n el mismo comportamiento que el resto, si 
  no son capturadas pasar&aacute;n al método de nivel superior, y seguir&aacute;n 
  as&iacute; hasta llegar a la funci&oacute;n principal, momento en el que si 
  no se captura provocar&aacute; la salida de nuestro programa mostrando el error 
  correspondiente.</p>
<h3> <span class="subsection">2.1.4. Creaci&oacute;n de nuevas excepciones</span></h3>
<p>Adem&aacute;s de utilizar los tipos de excepciones contenidos en la distribuci&oacute;n 
  de Java, podremos crear nuevos tipos que se adapten a nuestros problemas.</p>
<p>Para crear un nuevo tipo de excepciones simplemente deberemos crear una clase 
  que herede de <b> Exception</b> o cualquier otro subgrupo de excepciones existente. 
  En esta clase podremos a&ntilde;adir m&eacute;todos y propiedades para almacenar 
  informaci&oacute;n relativa a nuestro tipo de error. Por ejemplo:</p>
<pre class="codigo">public class MiExcepcion extends Exception
{
	public MiExcepcion (String mensaje)
	{
		super(mensaje);
	}
}</pre>
<p>Adem&aacute;s podremos crear subclases de nuestro nuevo tipo de excepci&oacute;n, 
  creando de esta forma grupos de excepciones. Para utilizar estas excepciones
(capturarlas y/o lanzarlas) hacemos lo mismo que lo explicado antes para las
excepciones que se tienen definidas en Java.</p>
</body>
</html>
