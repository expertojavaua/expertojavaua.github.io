<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">

	<title>Untitled</title>
	<link href="../../../apuntes.css" rel="stylesheet" type="text/css">
</head>

<body>

<h1> Tema 5: JSP y XML</h1>

<p>Si Java es el lenguaje portable por excelencia e independiente de la m&aacute;quina, 
  XML representa el equivalente a Java en cuanto a almacenamiento de datos. Ser 
  capaz de almacenar datos estructurados, pero en formato de &quot;texto plano&quot; 
  nos da la posibilidad de almacenar informaci&oacute;n compleja de manera portable. 
  Esta capacidad se usa en muchos lugares: por ejemplo como formato de exportaci&oacute;n/importaci&oacute;n 
  de bases de datos, como formato para ficheros de configuraci&oacute;n en toda 
  la plataforma J2EE, o como lenguaje de definici&oacute;n de p&aacute;ginas web. 
  Es en este &uacute;ltimo contexto donde mejor podemos combinar la capacidad 
  de procesamiento de JSP con la portabilidad de XML. No obstante, JSP y XML se 
  pueden combinar de diversos modos en aplicaciones web.</p>
<h2>5.1. Usos de JSP y XML</h2>
<p>Caben diversas posibilidades a la hora de combinar JSP con XML. Algunas de 
  ellas son:</p>
<ul>
  <li>Usar XML como &quot;formato neutro&quot; para la definici&oacute;n de p&aacute;ginas 
    web, y luego transformarlo al lenguaje adecuado para el dispositivo cliente 
    (HTML, WAP, texto plano,...) utilizando XSLT. Para ello podemos:</li>
  <ul>
    <li>Definir las p&aacute;ginas JSP como p&aacute;ginas XML y luego postprocesarlas 
      con <b>XSLT</b> antes de enviarlas al cliente. El postprocesamiento se puede 
      hacer con un filtro o bien con etiquetas JSP especiales.</li>
    <li>Definir el XML como un fichero &quot;est&aacute;tico&quot;, y mediante 
      <b>XSLT</b> generar un JSP con contenido din&aacute;mico. Esta transformaci&oacute;n 
      se har&iacute;a &quot;off-line&quot;. A partir de este momento tendr&iacute;amos 
      p&aacute;ginas JSP id&eacute;nticas a las que hemos empleado hasta ahora, 
      salvo que podr&iacute;amos emplear distintas plantillas XSLT para generar 
      salida para diferentes dispositivos.</li>
  </ul>
  <li>Usar un documento XML como una peque&ntilde;a &quot;base de datos&quot; 
    y utilizar la capacidad de procesamiento de JSP para filtrar la informaci&oacute;n 
    (seleccionar datos, reordenar, hacer b&uacute;squedas,...). El filtrado de 
    informaci&oacute;n se har&iacute;a con expresiones <b>XPath</b>.</li>
</ul>
<p>J2EE nos proporciona dos herramientas fundamentales para conseguir estos fines: 
</p>
<ul>
  <li>El API <b>JAXP</b>, que nos permite procesar y transformar XML mediante 
    c&oacute;digo Java.</li>
  <li>La librer&iacute;a <b>JSTL</b>, que incluye una serie de etiquetas para 
    procesar y transformar XML.</li>
</ul>
<h2>5.2. Procesamiento de JSP y XML con JAXP</h2>
<p>Se trata de utilizar c&oacute;digo Java que llame al API JAXP para procesar 
  el XML. Como se ve en el <b>m&oacute;dulo de XML y Java</b> de este curso, JAXP 
  permite procesar documentos XML (reorganizarlos, filtrarlos, cambiar su estructura) 
  mediante los APIs est&aacute;ndar SAX y DOM y adem&aacute;s aplicar hojas de 
  estilo XSLT para transformarlos a cualquier formato.</p>
<p>En el contexto de una aplicaci&oacute;n web, que es donde vamos a usar JSP, 
  el c&oacute;digo Java puede ejecutarse en el servidor, <em>on line</em> en cada 
  petici&oacute;n HTTP (mediante un filtro) o bien <em>off-line</em>.</p>
<h3>5.2.1. Usar el XML para conseguir independencia del cliente</h3>
<p>Como ejemplo, pod&eacute;is bajaros la aplicaci&oacute;n <a href="http://www.jtech.ua.es/j2ee/2002-2003/jsp/apuntes/miniamazonXML.war">MiniamazonXML</a> 
  en formato WAR (la &quot;diminuta&quot; tienda web de discos y libros pero ahora 
  desarrollada en JSP con XML en lugar de HTML). Un ejemplo de p&aacute;gina de 
  MiniamazonXML es la p&aacute;gina de datos de un producto, <b>masinfo.jsp</b>:</p>
<pre class="codigo">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot; ?&gt;
&lt;jsp:useBean id=&quot;prod&quot; class=&quot;beans.prodBean&quot;/&gt;
&lt;producto&gt;
   &lt;titulo&gt;
      &lt;jsp:getProperty name=&quot;prod&quot; property=&quot;titulo&quot;/&gt;
   &lt;/titulo&gt;
   &lt;% for (int i=0; i&lt;prod.getNumAutores(); i++) { %&gt;
      &lt;autor&gt;
         &lt;jsp:setProperty name=&quot;prod&quot; property=&quot;numAutor&quot; value=&quot;&lt;%=i%&gt;&quot;/&gt;
         &lt;jsp:getProperty name=&quot;prod&quot; property=&quot;autor&quot;/&gt;
      &lt;/autor&gt;
   &lt;% } %&gt;
   &lt;descripcion&gt;
      &lt;jsp:getProperty name=&quot;prod&quot; property=&quot;descripcion&quot;/&gt;
   &lt;/descripcion&gt;
&lt;/producto&gt;</pre>
<p>Obs&eacute;rvese que la p&aacute;gina no es un documento XML bien formado, 
  por &quot;culpa&quot; del c&oacute;digo Java que contiene. Como ya hemos visto 
  en el tema 3, el c&oacute;digo de la p&aacute;gina se podr&iacute;a eliminar 
  utilizando etiquetas JSTL, aunque en algunos casos extremos no habr&aacute; 
  forma de evitarlo. No obstante, esto no importa, porque antes de procesar el 
  XML con JAXP lo procesar&aacute; el contenedor JSP (en nuestro caso Tomcat) 
  que &quot;eliminar&aacute;&quot; el c&oacute;digo Java, dejando &uacute;nicamente 
  XML.</p>
<p>Si se visualiza la p&aacute;gina de alg&uacute;n producto desde el navegador, 
  introduciendo en la URL</p>
<pre class="codigo">http://localhost:8080/miniamazonxml/main?accion=masinfo&amp;cod=0001</pre>
<p>se obtendr&aacute; el documento XML perteneciente al producto solicitado. El 
  Explorer muestra el documento en forma de &aacute;rbol, mientras que otros navegadores, 
  como Netscape, muestran simplemente el texto sin las etiquetas.</p>
<p>Para obtener el documento en otros formatos (por ejemplo HTML) necesitamos 
  una hoja de estilo XSLT y un proceso que la aplique. En MiniamazonXML hay implementado 
  un filtro (la clase <b>FiltroXML</b>, ver el fichero de configuraci&oacute;n 
  de la aplicaci&oacute;n) que postprocesa el resultado devuelto por el contenedor 
  JSP aplic&aacute;ndole una hoja de estilo XSLT. El filtro se activa si en el 
  resultado devuelto por Tomcat aparece una instrucci&oacute;n de procesamiento 
  denominada <b>xslt</b>. A esta instrucci&oacute;n se le debe poner como par&aacute;metro 
  el nombre de la hoja de estilo a aplicar y el nombre del navegador ante el que 
  hay que aplicar la hoja (recordemos que los navegadores se identifican mediante 
  la cabecera HTTP <code>User-Agent</code>). Por ejemplo:</p>
<pre class="codigo">
&lt;? xslt cliente=&quot;Mozilla&quot; xsl=&quot;masinfo-html.xsl&quot; ?&gt;
</pre>
<p>Volved a probar la solicitud HTTP anterior introduciendo esta l&iacute;nea 
  en el fichero XML y comprobar el resultado. El navegador recibir&aacute; el 
  c&oacute;digo HTML producto de la transformaci&oacute;n del documento original 
  XML. Desarrollando distintas plantillas XSLT podemos ofrecer distintos formatos 
  a distintos clientes web (navegadores, PDAs, m&oacute;viles WAP,...).</p>
<h2>5.3. Procesamiento de XML con la librer&iacute;a JSTL</h2>
<p>Como ya se ha visto en el <b>tema 3</b>, JSTL dispone de etiquetas para procesamiento 
  de documentos XML. De este modo no es necesario programar c&oacute;digo Java 
  para trabajar con XML, sino que se puede hacer m&aacute;s f&aacute;cilmente 
  con etiquetas.</p>
<p>Las etiquetas dedicadas a XML est&aacute;n divididas en tres grupos, atendiendo 
  a la funci&oacute;n que cumplen:</p>
<center>
  <table width="70%" border="1" cellspacing="0" cellpadding="5">
    <tr> 
      <th>Funci&oacute;n</th>
      <th>Etiquetas</th>
    </tr>
    <tr> 
      <td>Core</td>
      <td> 
        <code><p>out</p>
        <p>parse</p>
        <p>set</p></code>
      </td>
    </tr>
    <tr> 
      <td>Control de flujo</td>
      <td> 
        <p><code>forEach</code></p>
        <p><code> choose</code></p>
        <p>
        <pre>   when
   otherwise</pre>
        <p><code>if</code></p>
      </td>
    </tr>
    <tr>
      <td>Transformaci&oacute;n</td>
      <td>
        <p><code>transform</code></p>
        <p><code>param</code></p>
      </td>
    </tr>
  </table>
</center>
<p>&nbsp;</p>
<p>Como se ve, la mayor&iacute;a de etiquetas <b>core</b> y de <b>control de flujo</b> 
  tienen el mismo nombre que en las otras &aacute;reas de JSTL. La raz&oacute;n 
  es que tienen la misma funci&oacute;n, aunque orientada a XML. La diferencia 
  principal es el soporte de expresiones <b>XPath</b>.</p>
<h3>5.3.1. Etiquetas Core</h3>
<p>Estas etiquetas proporcionan las funcionalidades b&aacute;sicas para analizar 
  XML y acceder a nodos dentro del documento.</p>
<p>La etiqueta <b>parse</b> analiza el documento XML especificado con el atributo 
  <code>xml</code> y guarda el resultado en la variable especificada por el atributo 
  <code>var</code>. Por ejemplo:</p>

<pre class="codigo">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jstl/core&quot;%&gt;<br>&lt;%@ taglib prefix=&quot;x&quot; uri=&quot;http://java.sun.com/jstl/xml&quot;  %&gt;<br>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;title&gt;Ejemplo de parse&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>   &lt;c:set var=&quot;discos&quot;&gt;<br>      &lt;disco&gt;<br>        &lt;titulo&gt; O sea &lt;/titulo&gt;<br>        &lt;interprete&gt; Enrique Iglesias &lt;/interprete&gt;<br>      &lt;/disco&gt;<br>   &lt;/c:set&gt; <br>   <b>&lt;x:parse var=&quot;analizado&quot; xml=&quot;${discos}&quot; /&gt;
</b>
   &lt;!-- sacar el t&iacute;tulo --&gt;
   t&iacute;tulo disco: &lt;x:out <b>select=&quot;$analizado//titulo&quot;</b>/&gt;<br>
   &lt;!-- meter el t&iacute;tulo en una variable para sacarlo con c:out --&gt;
   &lt;x:set var=&quot;tit&quot; <b>select=&quot;string($analizado//titulo)&quot;</b>/&gt;<br>   t&iacute;tulo disco: &lt;c:out value=&quot;${tit}&quot;/&gt; &lt;br&gt;<br>
&lt;/body&gt;<br>&lt;/html&gt;</pre>
<p>Primero metemos un &quot;documento XML&quot; empotrado en la p&aacute;gina 
  web en la variable <code>discos</code> (podr&iacute;amos haberlo tomado de una 
  URL cualquiera con un <code>c:import</code>). Luego analizamos el documento 
  con <code>parse</code>, y a partir de este momento podemos acceder a cualquiera 
  de sus nodos con una expresi&oacute;n XPath.</p>
<p>La etiqueta <b>x:out</b> toma una expresi&oacute;n XPath (un conjunto de nodos), 
  la convierte a <code>String</code> autom&aacute;ticamente y la inserta en la 
  salida. La etiqueta <b>x:set</b> es el equivalente a <b>c:set</b>, pero admite 
  expresiones XPath.</p>
<h3>5.3.2. Etiquetas de control de flujo</h3>
<p>Como en el caso anterior, su caracter&iacute;stica principal es que admiten 
  expresiones XPath. Como ejemplo, veremos el uso de la etiqueta <code>forEach</code>, 
  las otras son similares.</p>
<pre class="codigo">
&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jstl/core&quot; %&gt;<br>&lt;%@ taglib prefix=&quot;x&quot; uri=&quot;http://java.sun.com/jstl/xml&quot; %&gt;<br>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;title&gt;Ejemplo de x:forEach&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>   &lt;c:set var=&quot;discos&quot;&gt;<br>     &lt;discos&gt;<br>       &lt;disco&gt;<br>          &lt;titulo&gt; O sea &lt;/titulo&gt;<br>          &lt;interprete&gt; Enrique Iglesias &lt;/interprete&gt;<br>       &lt;/disco&gt;<br>       &lt;disco&gt;<br>          &lt;titulo&gt; Money for Nothing &lt;/titulo&gt;<br>          &lt;interprete&gt; Dire Straits &lt;/interprete&gt;<br>       &lt;/disco&gt;<br>     &lt;/discos&gt;<br>   &lt;/c:set&gt; <p>&lt;h2&gt; Titulos del mes &lt;/h2&gt;<br>
&lt;x:parse xml=&quot;${discos}&quot; var=&quot;analizado&quot;/&gt;<br><b>&lt;x:forEach var=&quot;tit&quot; select=&quot;$analizado//titulo&quot;&gt;</b><br>   &lt;x:out select=&quot;$tit&quot;/&gt; &lt;br&gt;<br>&lt;/x:forEach&gt;<br>
&lt;/body&gt;<br>&lt;/html&gt;</pre>
<p>Como se ve, es equivalente a un <code>c:forEach</code>, solo que admite expresiones 
  <b>XPath</b> en el atributo <code>select</code>.</p>
<h3>5.3.3. Etiquetas de transformaci&oacute;n</h3>
<p>la etiqueta <code>transform</code> aplica una plantilla XSLT. Por ejemplo, 
  suponiendo que hubi&eacute;ramos definido el documento XML &quot;empotrado&quot; 
  <code>discos</code> del ejemplo anterior, podr&iacute;amos a&ntilde;adir el 
  siguiente c&oacute;digo:</p>
<pre class="codigo">...

...
&lt;c:set var=&quot;hojaxsl&quot;&gt;<br>   &lt;?xml version=&quot;1.0&quot;?&gt;<br>   &lt;xsl:stylesheet version=&quot;1.0&quot; 
                   xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;
      &lt;xsl:template match=&quot;titulo&quot;&gt;<br>         &lt;br/&gt; &lt;b&gt; &lt;xsl:value-of select=&quot;.&quot;/&gt; &lt;/b&gt; &lt;br/&gt;<br>      &lt;/xsl:template&gt;<br>   &lt;/xsl:stylesheet&gt;<br>&lt;/c:set&gt;
<b>&lt;x:transform xml=&quot;${discos}&quot; xslt=&quot;${hojaxsl}&quot;/&gt;</b></pre>

</body>
</html>
