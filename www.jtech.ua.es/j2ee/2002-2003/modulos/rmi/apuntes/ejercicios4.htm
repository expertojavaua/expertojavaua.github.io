<html>
<head>
<title>Tema 6: Otros tipos de servidores</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="../../../apuntes.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000">
<h1>Ejercicios de RMI: Otros tipos de servidores</h1>
<ol>
  <li>Crear un objeto activable siguiendo los siguientes pasos:<br>
    <br>
    <ul>
      <li>Importar los paquetes: <code>java.rmi.*</code> y <code>java.rmi.activation.*</code><br>
      </li>
      <li>Crear la clase activable <code>ActivableImpl</code> extendiendo la clase 
        <code>Activatable</code>. El servidor activable <code>ActivableImpl</code> 
        debe implementar una interfaz remota definida previamente. Dicha interfaz 
        remota se debe llamar <code>RemoteInterface</code>, y est&aacute; formada 
        por el m&eacute;todo <code>Object servicioRemoto().</code></li>
      <li>Declarar el constructor con los argumentos <code>(ActivationID id, MarshalledObject 
        data)</code></li>
      <li> Implementar el m&eacute;todo de la interfaz remota, que simplemente 
        muestra por pantalla el mensaje &quot;Objeto accedido con &eacute;xito&quot;</li>
      <li>Crear la clase <code>setup</code>, que se utilizar&aacute; para registrar 
        el servidor activable <code>ActivableImpl</code>. Para ello importaremos, 
        adem&aacute;s de las clases anteriores, la clase <code>java.util.Properties</code>. 
        Dicha clase tendr&aacute; un m&eacute;todo <code>main()</code>, en el 
        que instalaremos un <code>SecurityManager</code>, creamos una instancia 
        de <code>ActivationGroup</code>, a continuaci&oacute;n creamos una instancia 
        de <code>ActivationGroupDesc</code>, declaramos una instancia del interfaz 
        remoto y registramos el descriptor de activaci&oacute;n, imprimiremos 
        el mensaje &quot;Descripci&oacute;n de activaci&oacute;n activado&quot;, 
        seguidamente procedemos a registrar el <i>stub </i>obtenido en el registro 
        de nombres e imprimirmos el mensaje &quot;ActivableImpl exportado&quot;, 
        finalmente terminamos la aplicaci&oacute;n con <code>exit(0)</code>.</li>
      <li>Compilamos la interfaz remota <code>RemoteInterface</code>, la clase 
        activable <code>ActivableImpl</code>, y la clase <code>setup</code>.</li>
      <li>Creamos los <i>stubs </i>y <i>skeletons</i> mediante <code>rmic</code></li>
      <li>Iniciamos el demonio de activaci&oacute;n <code>rmid</code></li>
      <li>Creamos el programa cliente denominado client, que realizar&aacute; 
        una llamada a servicioRemoto() e imprimir&aacute; los mensajes &quot;Llamada 
        finalizada&quot; y &quot;Resultado de la llamada: <i>mensaje devuelto 
        por el m&eacute;todo remoto</i>&quot;.</li>
      <li>Ejecutamos el programa <code>setup</code></li>
      <li>Ejecutamos el programa <code>client</code><br>
        <br>
      </li>
    </ul>
  </li>
  <p>&nbsp; 
  <p> 
  <li> 
    <p>Utilizando el ejemplo de servidor dual del apartado 6.2, implementar un 
      servidor remoto que implemente la interfaz <code>Calculator</code>, con 
      los siguientes m&eacute;todos:</p>
  </li>
  <ul>
    <li><code>long add(long a, long b); //devuelve la suma a+b</code></li>
    <li> <code>long sub(long a, long b); //devuelve la diferencia a-b</code></li>
    <li><code>long mul (long a, long b); //devuelve el producto a*b</code></li>
    <li><code>long div (long a, long b); //devuelve la divisi&oacute;n a/b</code></li>
  </ul>
  <br>
  <p>Implementar un cliente <code>CalculatorClient</code> que, dados los par&aacute;metros 
    <code>op1</code>, <code>op1</code> y <code>oper</code>, devuelva el resultado 
    de realizar la operaci&oacute;n oper sobre los operandos <code>op1</code> 
    y <code>op2</code>. </p>
</ol>
</body>
</html>
