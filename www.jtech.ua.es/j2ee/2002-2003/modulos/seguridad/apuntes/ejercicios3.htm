<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.dccia.ua.es/j2ee/seguridad/apuntes/ejercicios3.htm -->
<HTML><HEAD><TITLE>Seguridad en Java</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<META content=Sco name=Author><LINK href="../../../apuntes.css"
type=text/css rel=stylesheet>
<META content="MSHTML 5.50.4134.100" name=GENERATOR></HEAD>
<BODY>
<H1>Seguridad: Certificados Digitales</H1>

<P><B>4. Validez de los certificados </B>. Para este ejercicio hay que utilizar la herramienta
<I>keytool</I> para crear un certificado auto-firmado y almacenarlo en un keystore.
A continuación desarrollaremos una aplicación java que, tomando como entrada</P>
<P>- almacen: Nombre del keystore donde está almacenado el certificado.</P>
<P>- password: Password del keystore donde está almacenado el certificado.</P>
<P>- alias: Alias del certificado almacenado.</P>
<P>compruebe que el certificado es válido (dentro de las fechas). Para ello haremos uso
de los métodos de la clase <B>X509Certificate</B> que es una subclase de la clase
abstracta <B>Certitificate</B>. El fichero resultado será <I>Ejercicio4.java</I>.</P>

<P><B>5. Firmar con clave nueva. </B>. Desarrollar una aplicación que tomando las mismas
entradas que en el ejercicio anterior genere una clave privada nueva, firme con ella
el certificado y lo almacene con el alias "nuevo". En este caso hay que utilizar el package 
<B>sun.security.x509</B> tal como hicimos en el ejemplo <I>FirmarCertificado.java</I>. 
El programa resultante se llamará <I>Ejercicio5.java</I>. Mostrar el resultado imprimiendo 
el keystore</P>
</BODY></HTML>
