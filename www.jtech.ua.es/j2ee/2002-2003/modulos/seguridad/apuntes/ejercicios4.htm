<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.dccia.ua.es/j2ee/seguridad/apuntes/ejercicios4.htm -->
<HTML><HEAD><TITLE>Seguridad en Java</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<META content=Sco name=Author><LINK href="../../../apuntes.css"
type=text/css rel=stylesheet>
<META content="MSHTML 5.50.4134.100" name=GENERATOR></HEAD>
<BODY>
<H1>Seguridad: Autorización JAAS</H1>

<P><B>6. Login/Password </B>. Tal como hemos visto en teoría, la comprobación efectiva de la 
identidad del usuario se realiza en un objeto <B>LoginModule</B>. Concretamente, en el 
código <I>PasswordLoginModule.java</I> se procede a determinar si el password del usuario 
es realmente "scosco". Pero supongamos ahora que dicho password se encuentra codificado 
en un fichero llamado "passwords" mediante una clave simétrica "Blowfish" almacenada en
el fichero "clave". Entonces, en el momento de la comprobación deberíamos leer la clave y
el password, desencriptarlo y compararlo con el que nos suministran via texto.</P>
<P>En este ejercicio se pide desarrollar el módulo de login <I>Ejercicio6.java</I> en donde 
se lean los bytes de la clave y del password codificado y se utilicen para descodificar 
éste último. Usad la herramienta <I>Generar.java</I> para generar los ficheros "clave" y
"passwords" y tened en cuenta que una clave secreta (objeto <B>SecretKey</B>) se obtiene 
a partir de un array de bytes mediante el constructor de la clase <B>SecretKeySpec</B>.</P>
<P>Recordad también que para que el módulo de login funcione hay que modificar el fichero 
de configuración <I>jaas.config</I> convenientemente y lanzar la aplicación <I>EjemploJAAS</I> tomando
este config desde línea de comandos.</P>

</BODY></HTML>
