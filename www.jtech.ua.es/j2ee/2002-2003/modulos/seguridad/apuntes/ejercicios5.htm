<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.dccia.ua.es/j2ee/seguridad/apuntes/ejercicios5.htm -->
<HTML><HEAD><TITLE>Seguridad en Java</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<META content=Sco name=Author><LINK href="../../../apuntes.css"
type=text/css rel=stylesheet>
<META content="MSHTML 5.50.4134.100" name=GENERATOR></HEAD>
<BODY>
<H1>Seguridad: SSL</H1>

<P><B>7. Usando JCEKS </B>. El package <I>com.sun.net.ssl</I> se utiliza para permitir  cargar 
el keystore desde programa, eso sí a través de un password. No obstante, el formato por defecto 
usado para codificar los keystore permite que podamos leerlo desde teclado con keytool con lo 
que podemos extraer las claves del keystore e intentar descifrarlas. Sin embargo, con el formato 
alternativo JCEKS se utiliza PBE para encriptar las claves. Para utilizar este formato hay 
que hacer lo siguiente:</P>
<P>Desde keytool hay que usar la opción <I>-storetype JCEKS</I></P>
<P>Desde línea de comandos hay que añadir la opción:</P>
<P><I>-D.javax.net.ssl.keyStoreType=JCEKS</I></P>
<P>En este ejercicio se pide que se modifique tanto el cliente como el servidor de
sockets que usa <I>com.sun.net.ssl</I>, que se cree un keystore de este tipo y se pruebe que
funciona la comunicación.</P>
</BODY></HTML>
