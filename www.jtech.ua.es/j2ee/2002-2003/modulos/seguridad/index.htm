<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta http-equiv="Content-Language" content="es">
   <meta name="GENERATOR" content="Microsoft FrontPage 4.0">
   <meta name="ProgId" content="FrontPage.Editor.Document">
   <title>Seguridad en Java</title>
<style type="text/css"><!--
body {  font-family: arial; color: #003366; background-color: #FFFFFF}
h1 {
   background-color: #533982;
   color: #FFFFFF;
   padding: 0.2em;
}
h2 {  
   background-color: #003366;
   color: #FFFFFF;
   padding: 0.2em;
   font-size: 110%}
span.bold {
   font-weight: bold;
}
a:link {color: #003366}
a:visited {  color: #003366}
a:active {  color: #003366}
a:hover { color: #FFFFFF; background-color: #003366 }
p {text-align: justify}
li {text-align: justify}
.fecha {  color: #DC887C; font-weight: bold}
.importante {  color: #EA5555; font-weight: bold}
-->
</style>
</head>
<body bgcolor="#FFFFFF">

<table width="575" border="0" cellspacing="0" cellpadding="0" align="center" height="785">
  <tr>
    <td> <img src="cabecera-cursos.jpg" width="536" height="48"><br>
      &nbsp;</td>
  </tr>
  <tr> 
    <td colspan="2"> 
      <h2>Presentaci&oacute;n</h2>
      <p>Este m&oacute;dulo introduce la seguridad de aplicaciones desde la programaci&oacute;n 
        en Java. Partiendo de los API que soportan los servicios criptogr&aacute;ficos 
        b&aacute;sicos (JCA y JCE), estudiaremos: los mecanismos sim&eacute;tricos 
        (clave secreta) y asim&eacute;tricos (clave p&uacute;blica, clave privada) 
        y su aplicaci&oacute;n a la encriptaci&oacute;n de claves y ficheros; 
        las firmas y certificados digitales; la integraci&oacute;n de autentificaci&oacute;n 
        y autorizaci&oacute;n (JAAS); la comunicaci&oacute;n segura (HTTPS, SSL 
        y JSSE); la encriptaci&oacute;n del contenido de las bases de datos y 
        finalmente los servicios de seguridad que proporciona la plataforma BEA 
        WebLogic 7.0, a trav&eacute;s de ejemplos de SSL y JAAS. </p>
      <p>N&uacute;mero de horas: 17,5
      <blockquote>
        <p><a href="apuntes/index.htm">Sesiones del curso</a></p>
        <p><a href="recursos/index.htm">Recursos</a></p>
</blockquote>
      <h2> Profesores</h2>
      <p>Francisco Escolano Ruiz<br>
        <a href="mailto:sco@dccia.ua.es">sco@dccia.ua.es</a> 
      <h2>Temario</h2>
      <p>Tema 1: Servicios criptogr&aacute;ficos en Java<br>
      </p>
      <blockquote> 1.1: JCA: Java Cryptography Architecture.<br>
        1.2: JCE: Java Cryptography Extension.</blockquote>
      <p> Tema 2: Encriptaci&oacute;n sim&eacute;trica<br>
	  </p>
      <blockquote> 
        2.1: Estrategias de clave secreta.<br>
        2.2: DESede y Blowfish en JCE.<br>
        2.3: PBE: Encriptaci&oacute;n basada en password. <br>
        2.4: Codificaci&oacute;n de claves secreta.<br>
        2.5: Cifradores de stream.<br>
        2.6: Ejemplo de encriptaci&oacute;n de ficheros.
      </blockquote>
	  
      <p> Tema 3: Encriptaci&oacute;n asim&eacute;trica<br>
	  </p> 
      <blockquote> 3.1: Clave p&uacute;blica y clave privada.<br>
        3.2: Clases e interfaces en Java.<br>
        3.3: Encriptaci&oacute;n de claves de sesi&oacute;n.<br>
        3.4: Codificaci&oacute;n de claves p&uacute;blicas y privadas.<br>
        3.5: Encriptaci&oacute;n de ficheros con RSA.<br>
         </blockquote>
      <p>Tema 4: Firma digital y certificado digital</p>
      <blockquote> 4.1: Autentificaci&oacute;n por firma digital.<br>
        4.2: Certificados digitales: contenidos.<br>
        4.3: Generando certificados: keystores y keytool.<br>
        4.4: Crear certificados en Java.<br>
		4.5: Crear nuestra propia CA.
      </blockquote>
	  <p>Tema 5: Integrando autentificaci&oacute;n y autorizaci&oacute;n</p>
      <blockquote> 5.1: JAAS: Java Authentication and Authorization Service.<br>
        5.2: javax.security.auth.login: LoginContext y Configuration.<br>
        5.3: javax.security.auth.callback: Callback y CallbackHandler.<br>
        5.4: Interfaz javax.security.auth.spi: LoginModule.<br>
        5.5: Clase javax.security.auth.Subject. <br>
        5.6: Probando el ejemplo. <br>
        5.7: Autorizaci&oacute;n program&aacute;tica.</blockquote>
		
      <p>Tema 6: Protocolo SSL (Secure Sockets Layer)</p>
      <blockquote> 6.1: SSL b&aacute;sico: Funcionamiento y HTTPS<br>
        6.2: Instalando y configurando JSSE (Java Secure Sockets Extension).<br>
        6.3: Cliente y servidor HTTPS.<br>
        6.4: Protegiendo keystore y password: com.sun.net.ssl.<br>
        5.5: Autentificaci&oacute;n del cliente. </blockquote>
	  <p>Tema 7: Seguridad en bases de datos</p>
      <blockquote> 7.1: Encriptaci&oacute;n de tarjetas de cr&eacute;dito.<br>
        7.2: Configuraci&oacute;n de la base de datos.<br>
        7.3: Clase CreditCardFactory.<br>
        7.4: Protegiendo keystore y password: com.sun.net.ssl.<br>
        7.5: Modificando y consultando la base de datos. </blockquote>
	  <p>Tema 8: Seguridad en BEA WebLogic</p>
      <blockquote> 8.1: Ejemplos SSL en WebLogic.<br>
        8.2: Ejemplos JAAS en WebLogic.<br>
      </blockquote>
      </td>
</tr>
</table>

</body>
</html>
