<!-- saved from url=(0022)http://internet.e-mail -->
<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
                                                            
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
                                                            
  <meta name="Author" content="Nacho">
                                                            
  <meta name="GENERATOR" content="Microsoft FrontPage 4.0">
                                                        
  <link rel="stylesheet" href="../../../apuntes.css" type="text/css">
  <title>Tema 1: Conceptos b&aacute;sicos de Servlets</title>
</head>
  <body>
           
      <b>      
<h2>1.2. Configuración de servlets en aplicaciones web</h2>
      </b>
           
      <p>Para instalar un servlet en una aplicación
      web, se coloca la clase del servlet dentro del directorio <i>WEB-INF/classes</i> de
      la aplicación (respetando también la estructura de paquetes, creando
      tantos subdirectorios como sea necesario).&nbsp;&nbsp;Veremos ahora las
      formas que tenemos de invocar a ese servlet. </p>
           
      <h4>1.2.1. Llamada directa de servlets</h4>
           
      <p>Si no hemos configurado el servlet en el fichero descriptor de
      despliegue de la aplicación, podemos
      llamarlo con: </p>
           
      <pre class="codigo">http://localhost:8080/&lt;dir&gt;/servlet/&lt;nombre-servlet&gt;</pre>
           
      <p>donde <i>&lt;dir&gt; </i> se sustituye por el directorio donde
      tengamos la aplicación Web, y <i>&lt;nombre-servlet&gt;</i> es el nombre completo del
      servlet,
      incluyendo paquetes (separados por '.'). Por ejemplo, si tenemos el
      servlet <i>paquete1.subpaquete1.MiServlet</i>, dentro de la aplicación <i>miapp</i>,
      lo llamamos con: </p>
           
      <pre class="codigo">http://localhost:8080/miapp/servlet/paquete1.subpaquete1.MiServlet</pre>
           
      <p align="left">Notar que se pone el subdirectorio <i>servlet</i>, aunque
      la aplicación no contiene dicho subdirectorio. Esto es porque,
      mediante este subdirectorio &quot;virtual&quot; (inexistente), el servidor
      Web interpreta
      que tiene que cargar una clase del directorio <i>classes</i>, y que dicha
      clase es un servlet.</p>
      <p align="left">Si hemos colocado el servlet en el directorio <i>classes</i>
      de root, lo llamamos con:</p>
      <pre class="codigo">http://localhost:8080/servlet/&lt;nombre-servlet&gt;</pre>
           
      <h4>1.2.2. Mapeado de servlets y páginas JSP en el fichero descriptor</h4>
           
      <p align="left">Otra opción para llamar al servlet es incluir en el
      fichero descriptor de la aplicación donde lo hemos colocado (<i>web.xml</i>
      en Tomcat) la
      información necesaria para que lo encuentre. Dicha información consiste
      en introducir una marca <b>&lt;servlet&gt; </b> para cada servlet que se quiera llamar de esta
      forma:</p>
      <pre class="codigo">&lt;servlet&gt;
	&lt;servlet-name&gt;nombre&lt;/servlet-name&gt;
	&lt;servlet-class&gt;ClaseServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;</pre>
           
      <p>Donde <b>&lt;servlet-name&gt;</b> es un nombre identificativo y
      arbitrario del servlet, y <b>&lt;servlet-class&gt;</b> es la clase del
      servlet (incluyendo paquetes y subpaquetes, separados por '.'). Con esto,
      al servlet <i>ClaseServlet</i> lo podemos llamar de dos formas:</p>
      <pre class="codigo">http://localhost:8080/&lt;dir&gt;/servlet/ClaseServlet
http://localhost:8080/&lt;dir&gt;/servlet/nombre</pre>
           
      <p>siendo <i>&lt;dir&gt;</i> el directorio de la aplicación Web. De
      forma similar se podría mapear una página <b>JSP</b>, sustituyendo la
      etiqueta <i>&lt;servlet-class&gt;</i> por la etiqueta <b>&lt;jsp-file&gt;</b>:</p>
      <pre class="codigo">&lt;servlet&gt;
	&lt;servlet-name&gt;nombre2&lt;/servlet-name&gt;
	&lt;jsp-file&gt;/mipagina.jsp&lt;/servlet-class&gt;
&lt;/servlet&gt;</pre>
           
      <p>con lo que podemos invocar la página de dos formas también:</p>
      <pre class="codigo">http://localhost:8080/&lt;dir&gt;/mipagina.jsp
http://localhost:8080/&lt;dir&gt;/nombre2</pre>
           
      <h4>1.2.3. Asignar URLs a servlets o páginas JSP</h4>
           
      <p>El uso de la ruta <i>.../servlet/... </i>para llamar a los servlets
      puede ser útil durante la depuración, pero luego podemos querer invocar
      al servlet utilizando una URL alternativa. Esto se consigue mediante las
      etiquetas <b>&lt;servlet-mapping&gt;</b>:</p>
      <pre class="codigo">&lt;servlet-mapping&gt;
	&lt;servlet-name&gt;nombre&lt;/servlet-name&gt;
	&lt;url-pattern&gt;/ejemploservlet&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;</pre>
           
      <p>En la subetiqueta <b>&lt;servlet-name&gt;</b> se pone el nombre del
      servlet al que se quiere asignar la URL (será uno de los nombres dados en
      alguna etiqueta <i>&lt;servlet&gt; </i>previa), y en <b>&lt;url-pattern&gt;</b>
      colocamos la URL que le asignamos al servlet, que debe comenzar con '/'.</p>
           
      <p>Notar que primero se colocan todas las etiquetas <i>&lt;servlet&gt;</i>,
      y luego las <i>&lt;servlet-mapping&gt; </i>que se requieran.&nbsp;</p>
           
      <p>Así, con lo anterior, podremos llamar al servlet identificado con <i>nombre</i>
      de otra forma más:</p>
      <pre class="codigo">http://localhost:8080/&lt;dir&gt;/ejemploservlet</pre>
           
      <p>También podemos asignar en <i>&lt;url-pattern&gt;</i> expresiones
      como:</p>
           
      <pre class="codigo">&lt;servlet-mapping&gt;
	&lt;servlet-name&gt;nombre&lt;/servlet-name&gt;
	&lt;url-pattern&gt;/ejemploservlet/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;</pre>
           
      <p>o como:</p>
           
      <pre class="codigo">&lt;servlet-mapping&gt;
	&lt;servlet-name&gt;nombre&lt;/servlet-name&gt;
	&lt;url-pattern&gt;/ejemploservlet/*.jsp&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;</pre>
           
      <p>Con el primero, cualquier URL del directorio de nuestra aplicación Web
      que comience con <i>/ejemploservlet/</i> se redirigirá y llamará al
      servlet identificado con <i>nombre</i>. Por ejemplo, las direcciones:</p>
           
      <pre class="codigo">http://localhost:8080/&lt;dir&gt;/ejemploservlet/unapagina.html
http://localhost:8080/&lt;dir&gt;/ejemploservlet/misjsp/maspaginas.jsp</pre>
           
      <p>acabarían llamando al servlet <i>nombre</i>.</p>
           
      <p>Con el segundo, cualquier llamada a cualquier página JSP del
      directorio <i>/ejemploservlet/</i> de nuestra aplicación se redirigiría
      al servlet <i>nombre</i>. Podemos hacer que distintas URLs llamen a un
      mismo servlet, sin más que añadir varios grupos <i>&lt;servlet-mapping&gt;</i>,
      uno por cada patrón de URL diferente, y todos con el mismo <i>&lt;servlet-name&gt;</i>.&nbsp;</p>
           
      <p>Este mismo procedimiento se aplica, sin cambio alguno, si en lugar de
      un servlet queremos tratar una página JSP.</p>
           
      <h4>1.2.4. Asignar parámetros de inicio a un servlet o página JSP</h4>
           
      <p>El hecho de asignar un nombre a un servlet o página JSP mediante la
      etiqueta <i>&lt;servlet&gt; </i>y sus subetiquetas nos permite
      identificarlo con ese nombre, y también poderle asignar parámetros de
      inicio. Para asignar parámetros se colocan etiquetas <b>&lt;init-param&gt;</b>
      dentro de la etiqueta <i>&lt;servlet&gt;</i> del servlet o página JSP al
      que le queremos asignar parámetros. Dichas etiquetas tienen como
      subetiquetas un <b>&lt;param-name&gt;</b> (con el nombre del parámetro) y
      un <b>&lt;param-value&gt;</b> (con el valor del parámetro). Por ejemplo:</p>
      <pre class="codigo">&lt;servlet&gt;
	&lt;servlet-name&gt;nombre&lt;/servlet-name&gt;
	&lt;servlet-class&gt;ClaseServlet&lt;/servlet-class&gt;
	&lt;init-param&gt;
		&lt;param-name&gt;param1&lt;/param-name&gt;
		&lt;param-value&gt;valor1&lt;/param-value&gt;
	&lt;/init-param&gt;
	&lt;init-param&gt;
		&lt;param-name&gt;param2&lt;/param-name&gt;
		&lt;param-value&gt;valor2&lt;/param-value&gt;
	&lt;/init-param&gt;
&lt;/servlet&gt;</pre>
           
      <p>Para obtener luego los parámetros desde el servlet se utiliza <b>getServletConfig().getInitParameter(nombre)</b>
      donde <i>nombre</i> es el valor <i>&lt;param-name&gt;</i> del parámetro
      que se busca, y devuelve el valor (elemento <i>&lt;param-value&gt;</i>
      asociado), que es de tipo <i>String</i> siempre. Para obtener estos
      valores desde páginas JSP se emplean otros métodos.</p>
      <p>Los parámetros de inicio sólo se aplican cuando accedemos al servlet
      o página JSP a través del nombre asignado en <i>&lt;servlet-name&gt;</i>,
      o a través de la URL asociada en un <i>&lt;servlet-mapping&gt;</i>.</p>
      <h4>1.2.5. Deshabilitar un servlet</h4>
           
      <p>En algunas ocasiones nos puede interesar que no se pueda llamar a un
      servlet a través del alias <i>.../servlet/...</i> Por ejemplo, si se
      utilizan parámetros de inicio en el servlet, estos sólo se pueden
      utilizar a través de la URL alternativa, y no a través de <i>/servlet/</i>.
      Otra razón la veremos en el tema de seguridad.</p>
      <p>Para deshabilitar la ruta <i>/servlet/</i> tenemos dos alternativas:</p>
      <ul>
        <li><b>Re-mapear el patrón <i>/servlet/</i> en cada aplicación</b>:
          esta forma es más trabajosa, pero completamente portable.</li>
      </ul>
      <blockquote>
        <p>Lo que tenemos que hacer es crear un servlet que muestre un mensaje
        de error (lo llamamos, por ejemplo <i>ErrorServlet</i>), y luego mapear
        las URLs de tipo <i>/servlet/* </i>para que se cargue dicho servlet, de
        la siguiente forma:</p>
        <pre class="codigo">&lt;servlet&gt;
	&lt;servlet-name&gt;error&lt;/servlet-name&gt;
	&lt;servlet-class&gt;ErrorServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;
...
&lt;servlet-mapping&gt;
	&lt;servlet-name&gt;error&lt;/servlet-name&gt;
	&lt;url-pattern&gt;/servlet/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;</pre>
           
      </blockquote>
      <ul>
        <li><b>Deshabilitar globalmente el servlet</b>: esta opción es más
          rápida, pero dependiente del servidor que se utilice, y por lo tanto,
          no portable.</li>
      </ul>
      <blockquote>
        <p>Por ejemplo, en Tomcat la forma de deshabilitarlo es igual que la
        técnica vista en el punto anterior, pero colocando las etiquetas <i>&lt;servlet&gt;</i>
        y <i>&lt;servlet-mapping&gt;</i> en el fichero <i>web.xml</i> global
        (colocado en <i>conf/web.xml</i>). Normalmente ya tiene las etiquetas
        puestas, y sólo hace falta descomentarlas.</p>
      </blockquote>
      <h4>1.2.6. Cargar servlets al inicio</h4>
           
      <p>A veces nos puede interesar que un servlet se cargue al arrancar el
      servidor, y no con la primera petición de un cliente. Para hacer eso,
      incluimos una etiqueta <b>&lt;load-on-startup&gt;</b> dentro de la
      etiqueta <i>&lt;servlet&gt;</i>. Dicha etiqueta puede estar vacía:</p>
      <pre class="codigo">&lt;servlet&gt;
	&lt;servlet-name&gt;nombre&lt;/servlet-name&gt;
	&lt;servlet-class&gt;ClaseServlet&lt;/servlet-class&gt;
	&lt;load-on-startup/&gt;
&lt;/servlet&gt;</pre>
           
      <p>o contener un número:</p>
      <pre class="codigo">&lt;servlet&gt;
	&lt;servlet-name&gt;nombre&lt;/servlet-name&gt;
	&lt;servlet-class&gt;ClaseServlet&lt;/servlet-class&gt;
	&lt;load-on-startup&gt;2&lt;/load-on-startup&gt;
&lt;/servlet&gt;</pre>
           
      <p>que indica el orden en que el servidor irá cargando los servlets (de
      menor a mayor valor).&nbsp;</p>
           
        </body>
        </html>
