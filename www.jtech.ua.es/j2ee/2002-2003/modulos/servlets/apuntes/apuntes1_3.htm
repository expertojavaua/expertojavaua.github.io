<!-- saved from url=(0022)http://internet.e-mail -->
<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
                                                            
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
                                                            
  <meta name="Author" content="Nacho">
                                                            
  <meta name="GENERATOR" content="Microsoft FrontPage 4.0">
                                                        
  <link rel="stylesheet" href="../../../apuntes.css" type="text/css">
  <title>Tema 1: Conceptos b&aacute;sicos de Servlets</title>
</head>
  <body>
           
      <b>      
<h2>1.3. Ejemplos básicos de servlets</h2>
      </b>
           
      <h4>1.3.1. Servlet que genera texto plano</h4>
           
      <p>El siguiente ejemplo de servlet muestra una página con un mensaje
      de saludo: &quot;Este es un servlet de prueba&quot;. Lo
      cargamos mediante petición GET. </p>
           
      <pre class="codigo">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class ClaseServlet extends HttpServlet
{
	public void doGet(HttpServletRequest request, 
			  HttpServletResponse response) 
	throws ServletException, IOException
	{
<b>		</b>PrintWriter out = response.getWriter();<b>
		</b>out.println (&quot;Este es un servlet de prueba&quot;);<b>
</b>	}
}</pre>
           
      <p>Se obtiene un <i>Writer</i> para poder enviar datos al usuario.
      Simplemente se le envía la cadena que se mostrará en la página
      generada.</p>
           
      <h4>1.3.2. Servlet que genera una página HTML</h4>
           
      <p>Este otro ejemplo escribe código HTML para mostrar una página web.</p>
      <pre class="codigo">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class ClaseServletHTML extends HttpServlet
{
	public void doGet(HttpServletRequest request, 
			  HttpServletResponse response) 
	throws ServletException, IOException
	{
		response.setContentType(&quot;text/html&quot;);
		PrintWriter out = response.getWriter();
		out.println (&quot;&lt;!DOCTYPE HTML PUBLIC \&quot;&quot;+
			     &quot;-//W3C//DTD HTML 4.0 &quot; + 
			     &quot;Transitional//EN\&quot;&gt;&quot;);
		out.println (&quot;&lt;HTML&gt;&quot;);
		out.println (&quot;&lt;BODY&gt;&quot;);
		out.println (&quot;&lt;h1&gt;Titulo&lt;/h1&gt;&quot;);
		out.println (&quot;&lt;br&gt;Servlet que genera HTML&quot;);
		out.println (&quot;&lt;/BODY&gt;&quot;);
		out.println (&quot;&lt;/HTML&gt;&quot;);
<b>	</b>}
}</pre>
           
      <p>Para generar una página HTML con un servlet debemos seguir dos pasos:</p>
      <ul>
        <li>Indicar que el contenido que se va a enviar es HTML (mediante el
          método <i>setContentType() </i>de <i>HttpServletResponse</i>):</li>
      </ul>
      <blockquote>
        <pre class="codigo">response.setContentType(&quot;text/html&quot;);</pre>
           
        <p>Esta línea es una cabecera de respuesta, que veremos más adelante
        cómo utilizar. Hay que ponerla antes de obtener el <i>Writer</i>.</p>
      </blockquote>
      <ul>
        <li>Escribir en el flujo de salida el texto necesario para generar la
          página HTML. La línea que genera el DOCTYPE no es necesaria, aunque
          sí muy recomendada para que se sepa qué versión de HTML se está
          empleando.</li>
      </ul>
      <h4>1.3.3. Servlet que utiliza parámetros de inicialización</h4>
           
      <p>Este otro ejemplo utiliza dos parámetros de inicialización externos:</p>
      <pre class="codigo">import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class ClaseServletInit extends HttpServlet
{
	<b>// Mensaje que se va a mostrar en la pagina</b>
	String mensaje = &quot;&quot;;		<b>
	</b><b>// Numero de veces que se va a repetir el mensaje
</b>	int contador = 1;		<b>
</b>
<b>	// Metodo de inicializacion
</b>	
	public void init(ServletConfig conf) 
	throws ServletException
	{
		super.init(conf);	<b>// MUY IMPORTANTE</b>
		
		mensaje = conf.getInitParameter(&quot;mensaje&quot;);
		if (mensaje == null)
			mensaje = &quot;Hola&quot;;
		
		try
		{
			contador = Integer.parseInt(
			   conf.getInitParameter(&quot;contador&quot;));
		} catch (NumberFormatException e) {
			contador = 1;
		}
	}

<b>	// Metodo para procesar una peticion GET
</b>	
	public void doGet(HttpServletRequest request, 
			  HttpServletResponse response) 
	throws ServletException, IOException
	{
		response.setContentType(&quot;text/html&quot;);
		PrintWriter out = response.getWriter();
		out.println (&quot;&lt;!DOCTYPE HTML PUBLIC \&quot;&quot;+
			     &quot;-//W3C//DTD HTML 4.0 &quot; + 
			     &quot;Transitional//EN\&quot;&gt;&quot;);
		out.println (&quot;&lt;HTML&gt;&quot;);
		out.println (&quot;&lt;BODY&gt;&quot;);
		
		for (int i = 0; i &lt; contador; i++)		
		{
			out.println (mensaje);
			out.println (&quot;&lt;BR&gt;&quot;);
		}
		
		out.println (&quot;&lt;/BODY&gt;&quot;);
		out.println (&quot;&lt;/HTML&gt;&quot;);
	}
}</pre>
           
      <ul>
        <li>Se utiliza el método <b>init()</b> con un parámetro <i>ServletConfig</i>
          para poder tomar los parámetros externos. Es importante la llamada a <i>super</i>
          al principio del método.</li>
        <li>Mediante el método <b>getInitParameter()</b> de <i>ServletConfig </i>obtenemos
          dos parámetros: <i>mensaje</i> y <i>contador</i>, que asignamos a las
          variables del mismo nombre. El primero indica el mensaje que se va a
          mostrar en la página, y el segundo el número de veces que se va a
          mostrar.</li>
        <li>En <b>doGet()</b><i> </i>hacemos uso de esos parámetros obtenidos, para mostrar
          el mensaje las veces indicadas.</li>
      </ul>
           
      <h4>1.3.4. Prueba de los ejemplos</h4>
           
      <p>Para probar el ejemplo, tendríamos dos posibilidades </p>
           
      <ul>
        <li>Crear un directorio en <i>webapps</i> para el ejemplo (por ejemplo, <i>webapps/ejemplobasico</i>),
          y dentro de él:
          <ul>
            <li>Definir un directorio <i>WEB-INF</i></li>
            <li>Dentro de <i>WEB-INF</i> colocar un fichero <i>web.xml</i>
              descriptor de la aplicación. Podemos mapear los servlets en este
              fichero descriptor, como veremos a continuación. </li>
            <li>Colocar los servlets en el directorio <i>WEB-INF/classes</i>.</li>
          </ul>
        </li>
        <li>Crear un fichero WAR con la estructura de ficheros y directorios
          vista en el punto anterior, y copiar dicho fichero WAR en el
          directorio <i>webapps</i> de Tomcat</li>
      </ul>
      <p>Se proporciona un fichero <a href="ejemplos/basico/ejemplobasico.war.zip">WAR</a>
      con los tres servlets colocados en la subcarpeta <i>WEB-INF/classes</i>, y
      un fichero <i>web.xml</i> con el siguiente contenido:</p>
      <pre class="codigo">&lt;!DOCTYPE web-app PUBLIC &quot;-//Sun Microsystems, Inc.//
 DTD Web Application 2.2//EN&quot; 
 &quot;http://java.sun.com/j2ee/dtds/web-app_2_2.dtd&quot;&gt;

&lt;web-app&gt;
	&lt;servlet&gt;
		&lt;servlet-name&gt;ejemplo1_1&lt;/servlet-name&gt;
		&lt;servlet-class&gt;ClaseServlet&lt;/servlet-class&gt;
	&lt;/servlet&gt;
	&lt;servlet&gt;
		&lt;servlet-name&gt;ejemplo1_2&lt;/servlet-name&gt;
		&lt;servlet-class&gt;ClaseServletHTML&lt;/servlet-class&gt;
	&lt;/servlet&gt;
	&lt;servlet&gt;
		&lt;servlet-name&gt;ejemplo1_3&lt;/servlet-name&gt;
		&lt;servlet-class&gt;ClaseServletInit&lt;/servlet-class&gt;
		&lt;init-param&gt;
			&lt;param-name&gt;
			mensaje
			&lt;/param-name&gt;
			&lt;param-value&gt;
			Mensaje de prueba
			&lt;/param-value&gt;
		&lt;/init-param&gt;
		&lt;init-param&gt;
			&lt;param-name&gt;contador&lt;/param-name&gt;
			&lt;param-value&gt;10&lt;/param-value&gt;
		&lt;/init-param&gt;
	&lt;/servlet&gt;

	&lt;servlet-mapping&gt;
		&lt;servlet-name&gt;ejemplo1_1&lt;/servlet-name&gt;
		&lt;url-pattern&gt;/ejemploservlet&lt;/url-pattern&gt;
	&lt;/servlet-mapping&gt;
	&lt;servlet-mapping&gt;
		&lt;servlet-name&gt;ejemplo1_2&lt;/servlet-name&gt;
		&lt;url-pattern&gt;/ejemploservletHTML&lt;/url-pattern&gt;
	&lt;/servlet-mapping&gt;
	&lt;servlet-mapping&gt;
		&lt;servlet-name&gt;ejemplo1_3&lt;/servlet-name&gt;
		&lt;url-pattern&gt;/ejemploservletInit&lt;/url-pattern&gt;
	&lt;/servlet-mapping&gt;
&lt;/web-app&gt;</pre>
           
      Vemos que se mapean los tres servlets:
      <ul>
        <li><b>ejemplo1_1</b> es el nombre para el primer servlet <i>ClaseServlet</i>,
          que se puede referenciar también con <i>/ejemploservlet</i>.</li>
        <li><b>ejemplo1_2</b> es el nombre para el segundo servlet <i>ClaseServletHTML</i>,
          que se puede referenciar también con <i>/ejemploservletHTML</i></li>
        <li><b>ejemplo1_3</b> es el nombre para el tercer servlet <i>ClaseServletInit</i>,
          que se puede referenciar también con <i>/ejemploservletInit</i>. En
          él se definen los parámetros de inicio <i>mensaje </i>y <i>contador</i>,
          utilizados internamente por el servlet (se definen mediante etiquetas <i>&lt;init-param&gt;</i>,
          indicando el nombre (<i>param-name</i>) y el valor (<i>param-value</i>)).</li>
      </ul>
      <p>Para probar los servlets, copiamos el fichero WAR en el directorio <i>webapps</i>
      de Tomcat. Para llamar a los servlets, podemos hacerlo de tres formas:</p>
      <ul>
        <li>Escribiendo, respectivamente para cada servlet:</li>
      </ul>
        <pre class="codigo">http://localhost:8080/ejemplobasico/servlet/ClaseServlet
http://localhost:8080/ejemplobasico/servlet/ClaseServletHTML
http://localhost:8080/ejemplobasico/servlet/ClaseServletInit</pre>
           
      <ul>
        <li>Sustituir la clase del servlet por su nombre asociado en el mapeo:
        </li>
      </ul>
        <pre class="codigo">http://localhost:8080/ejemplobasico/servlet/ejemplo1_1
http://localhost:8080/ejemplobasico/servlet/ejemplo1_2
http://localhost:8080/ejemplobasico/servlet/ejemplo1_3</pre>
           
      <ul>
        <li>Utilizar el mapeo en el fichero descriptor y llamar a los servlets
          con su URL asociada:</li>
      </ul>
        <pre class="codigo">http://localhost:8080/ejemplobasico/ejemploservlet
http://localhost:8080/ejemplobasico/ejemploservletHTML
http://localhost:8080/ejemplobasico/ejemploservletInit</pre>
           
      <p>NOTA: el servlet <i>ClaseServletInit</i> no tomará los
      parámetros si lo llamamos del primer modo, debido a que se asignan
      esos parámetros al mapeo.</p>
           
        </body>
        </html>
