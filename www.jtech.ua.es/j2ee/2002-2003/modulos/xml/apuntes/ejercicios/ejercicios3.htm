<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <title>Ejercicios de la sesi&oacute;n XML 3</title>
                
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" href="../../../../apuntes.css" type="text/css">
</head>
 <body>
<h1>DOM</h1>
<p><b>1.</b> Vamos a implementar un programa para visualizar el modelo DOM asociado 
  a un documento XML. Para ello se proporciona la clase <code>Visual</code>, en 
  el fichero <code>Visual.java</code>, cuyos principales atributos y m&eacute;todos 
  son:</p>
<ul>
  <li><code>document</code>: objeto <code>Document</code> que representa el documento 
    XML a visualizar </li>
  <li><code>Visual()</code>: constructor de la clase. Crea los contenidos de la 
    ventana en donde se visualizar&aacute; el &aacute;rbol DOM.</li>
  <li><code>AdapterNode</code>: Clase interna para visualizar el texto asociado 
    a un nodo del &aacute;rbol DOM.</li>
  <li><code>DomToTreeModelAdapter</code>: Clase interna para convertir el documento 
    DOM en un modelo <code>JTree</code> para poder ser visualizado por pantalla.</li>
</ul>
<p>Se proporciona tambi&eacute;n el fichero <code>MainVisual.java</code> para 
  poder probar la clase <code>Visual</code>.</p>
<p>El documento XML se pasa como par&aacute;metro del programa, que se llamar&aacute; 
  <code>VisualDom</code>, de forma que la sintaxis para su ejecuci&oacute;n ser&aacute;: 
  <code>java VisualDom fichero.xml</code></p>

<p>Como ejemplo de ficheros XML, pod&eacute;is utilizar los ficheros: <code>book-order.xml</code> 
  y <code>catalog.xml</code></p>
<p><br>
</p>
<p><b>2.</b> Haciendo uso de la clase anterior a&ntilde;adiremos un men&uacute; 
  desplegable con tres opcciones: a&ntilde;adir nodo (<code>add_node</code>), 
  eliminar nodo (<code>delete_node</code>), y guardar &aacute;rbol (<code>save_tree</code>). 
</p>
<ul>
  <li><code>add_node(Node current, int nodeType, name, value)</code>: a&ntilde;ade 
    un objeto <code>Node</code> de tipo <code>nodeType</code>, cuyo nombre es 
    <code>name</code>, y el valor viene dado por <code>value</code>. El nuevo 
    nodo se crea como hijo del nodo <code>current</code> seleccionado. </li>
  <li><code>delete_node(Node current)</code>: Elimina el objeto <code>Node</code> 
    seleccionado del &aacute;rbol DOM.</li>
  <li><code>save_tree(String nombre)</code>: Almacena el &aacute;rbol actual en 
    un fichero llamado <code>nombre</code>.</li>
</ul>
<p>&nbsp;</p>
<p><b>3.</b> Ahora vamos a implementar un buscador de referencias bibliogr&aacute;ficas 
  por a&ntilde;o de publicaci&oacute;n y por tema. Disponemos de un fichero XML 
  (<code>references.xm</code>l) con la informaci&oacute;n sobre las referencias 
  de art&iacute;culos y libros sobre distintos temas. La idea es utilizar dicho 
  fichero como entrada, y generar un fichero XML (<code>result.xml</code>) con 
  las referencias encontradas de un determinado tema y a&ntilde;o de publicaci&oacute;n. 
</p>
<p>La sintaxis de llamada al buscador ser&aacute;: <code>buscador fichero_entrada_XML 
  a&ntilde;o tema</code></p>
</body>
</html>
