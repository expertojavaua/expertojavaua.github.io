<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="../apuntes.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000">
<h1>Tema 1: JSP B&aacute;sico</h1>

<h2>1.1. Introducci&oacute;n a JSP</h2>
<p>JSP (<b>JavaServer Pages</b>) es una tecnolog&iacute;a que permite incluir 
  c&oacute;digo Java en p&aacute;ginas web. El denominado <em>contenedor JSP</em> (que sería un componente del servidor web) es el encargado de 
  tomar la p&aacute;gina, sustituir el c&oacute;digo Java que contiene por el 
  resultado de su ejecuci&oacute;n, y enviarla al cliente. As&iacute;, se pueden 
  dise&ntilde;ar f&aacute;cilmente p&aacute;ginas con partes fijas y partes variables. 
  El siguiente es un ejemplo muy sencillo de p&aacute;gina JSP:</p>
<pre class="codigo">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Mi primera p&aacute;gina JSP&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt; Hoy es: <b>&lt;%= new java.util.Date() %&gt; </b>&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p>Para ejecutar la p&aacute;gina basta con colocarla en una aplicaci&oacute;n 
  web (por ejemplo, en Tomcat, dentro de <code>webapps/ROOT</code>). No es necesario 
  que sea en un directorio espec&iacute;fico como ocurre con los servlets, sino 
  que puede ir en cualquier directorio en el que se colocar&iacute;a normalmente 
  un HTML.</p>
  
<p> La &uacute;ltima versi&oacute;n de la especificación JSP es la 2.0, aunque 
  es de reciente aparici&oacute;n (Tomcat 4.x implementa la versi&oacute;n anterior, 
  la 1.2, misma que cubre este tema). Como se verá, es una especificación paralela 
  al API de servlets, concretamente a la versión 2.3. Se puede encontrar más información 
  sobre JSP en </p>
  <center>
   <a href="http://java.sun.com/products/jsp">http://java.sun.com/products/jsp </a>
  </center>
<p>Aunque JSP y servlets parecen a primera vista tecnolog&iacute;as distintas, 
  en realidad el servidor web traduce internamente el JSP a un servlet, lo compila 
  y finalmente lo ejecuta cada vez que el cliente solicita la p&aacute;gina JSP. 
  Por ello, en principio, JSPs y servlets ofrecen la misma funcionalidad, aunque 
  sus caracter&iacute;sticas los hacen apropiados para distinto tipo de tareas. 
  Los JSP son mejores para generar p&aacute;ginas con gran parte de contenido 
  est&aacute;tico. Un servlet que realice la misma funci&oacute;n debe incluir 
  gran cantidad de sentencias del tipo <code>out.println()</code> para producir 
  el HTML. Por el contrario, los servlets son mejores en tareas que generen poca 
  salida, datos binarios o p&aacute;ginas con gran parte de contenido variable. 
  En proyectos m&aacute;s complejos, lo recomendable es combinar ambas tecnolog&iacute;as: 
  los servlets para el procesamiento de informaci&oacute;n y los JSP para presentar 
  los datos al cliente.</p>
<h2>1.2. Traducción de los JSP a servlets</h2>
<p>Como se ha comentado, la primera vez que se solicita una página JSP, el servidor genera el servlet equivalente, lo compila y lo ejecuta. Para las siguientes solicitudes, solo es necesario ejecutar el código compilado. El servlet generado de manera automática tiene un método <code>_jspService</code> 	que es el equivalente al <code>service</code> de los servlets "generados manualmente". En este método es donde se genera el código HTML, mediante instrucciones <code>println</code> y donde se ejecuta el código Java insertado en la página. Por ejemplo, la página <b>primera.jsp</b> podría generar un servlet con estructura similar al siguiente:</p>

<pre class="codigo">
public void _jspService(HttpServletRequest request, 
                        HttpServletResponse  response)
                        throws java.io.IOException, ServletException {
   JspWriter out = null;
   response.setContentType("text/html;ISO-8859-1");
   out.println("&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0        
                Transitional//EN\"&gt;);
   out.println("&lt;html&gt;");
   out.println("&lt;head&gt;");
   out.println("&lt;title&gt;Mi primera pagina JSP&lt;/title&gt;");
   out.println("&lt;/head&gt;");
   out.println("&lt;body&gt;");
   out.print("Hoy es ");
   out.println(new java.util.Date());
   out.println("&lt;/body&gt;");
   out.println("&lt;/html&gt;");
}
</pre>
<p>
El directorio donde se coloca el servlet generado, así como su nombre, dependen del servidor web. Por ejemplo, Tomcat utiliza su directorio <code>work/localhost/<var>aplicacion_web</var></code>. En caso de que la página esté en <code>ROOT</code>, el nombre de la aplicación se sustituye por un carácter de subrayado (<code>_</code>).
</p>
<h2> 1.3. Elementos de JSP </h2>
<p> 
Existen tres tipos de elementos JSP que podemos insertar en una página web:
</p>
<ul>
<li><b>Código</b>: podemos "incrustar" código Java de distintos tipos (declaraciones de variables y/o métodos, expresiones, sentencias) para que lo ejecute el contenedor JSP.</li>
<li><b>Directivas</b>: permiten controlar distintos parámetros del servlet resultante de la traducción automática del JSP</li>
<li><b>Acciones</b>: normalmente sirven para alterar el flujo normal de ejecución de la página (p.ej. redirecciones), aunque tienen usos variados.</li>
</ul> 
<p>
Se pueden poner comentarios en una página JSP entre los símbolos <code>&lt;%--</code> y <code>--%&gt;</code>. El contenedor JSP ignorará todo lo contenido entre ambos. Dentro de los fragmentos de código Java también se pueden colocar comentarios siguiendo la sintaxis habitual del lenguaje.
</p>
<h2> 1.4. Inserción de código en páginas JSP </h2>
<p>
Hay tres formas de insertar código Java en una página JSP:
<ul>
<li><b>Expresiones</b> de la forma <code>&lt;%= <var>expresión</var> %&gt;</code>: en este caso, la expresión se evalúa, su resultado se convierte a <code>String</code> y se inserta en la salida. </li>
<li><b>Scriptlets</b> de la forma <code>&lt;% <var>código</var> %&gt;</code></li>: el código se ejecuta dentro del método <code>_jspService</code> del servlet generado.
<li><b>Declaraciones</b> de la forma <code>&lt;%! <var>código</var> %&gt;</code>: se insertan en el cuerpo del servlet generado, fuera de sus métodos. </li>
</ul>
<h3>1.4.1. Expresiones</h3>
<p>
Como se ha visto, se evalúan, su resultado se convierte a un <code>String</code> y se escriben en la salida (el objeto predefinido <code>out</code>). La forma de traducir una expresión a código de servlet es imprimiéndola en <code>out</code> (mediante una sentencia <code>out.write(<var>expresion</var>)</code>) o similar.
</p>
<h3>1.4.2. <em>Scriptlets</em></h3>
<p>
Permiten ejecutar código arbitrario, cuyo resultado no es necesario enviar a la salida. Si desde un <em>scriptlet</em> se desea escribir algo en ésta, bastará con utilizar el objeto predefinido <code>out</code>. Un uso común de los <em>scriptlets</em> es hacer que ciertas partes de código HTML aparezcan o no en función de una condición. Por ejemplo:
</p>
<pre class="codigo">
<b>&lt;%
  java.util.Calendar ahora = java.util.Calendar.getInstance();
  int hora = ahora.get(java.util.Calendar.HOUR_OF_DAY);
%&gt;</b>
&lt;b&gt Hola mundo, &lt;i&gt
<b>&lt;% if ((hora>20)||(hora<6)) { %> </b>
     buenas noches
<b>&lt;% }  
   else if ((hora>=6)&&(hora<=12)) { %&gt;</b>
          buenos días
<b>&lt;%      }
	else { %&gt; </b>
           buenas tardes
<b>&lt;%      } %&gt;</b>
&lt;/i&gt &lt;/b&gt
</pre>
<h3>1.4.3. Declaraciones</h3>
<p>
Permiten definir variables o métodos que se insertarán dentro del cuerpo del servlet generado. Esto da la posibilidad de sobreescribir los métodos <code>jspInit</code> y <code>jspDestroy</code> que son el equivalente en JSP del <code>init</code> y <code>destroy</code> de los servlets. Las variables declaradas conservarán su valor entre sucesivas llamadas a la página, ya que son variables miembro del servlet y no locales al método <code>jspService</code>. Esto nos permite, por ejemplo, crear un contador de accesos a la página:
<pre class="codigo">
&lt;%! private int accesos = 0; %&gt;
&lt;h1&gt; Visitas: &lt;%= ++accesos %&gt; &lt;/h1&gt;
</pre>
<p></p>
<h3> 1.4.4. Objetos implícitos de JSP </h3>
<p>En cualquiera de estas tres formas, se puede hacer referencia a una serie de <em> objetos implícitos </em>, que se corresponden con objetos útiles del API de servlets (petición, respuesta, ...) y que en realidad son variables instanciadas de manera automática en el servlet generado a partir del JSP. Los objetos predefinidos en JSP se referencian en la tabla 1.
</p>
<center>
<p>
<table border="1" cellpadding="5">
<tr>
       <th>Objeto</th>
       <th>Significado</th>
</tr>
<tr>
       <td><b><code>request</code></b></td>
       <td>el objeto <code>HttpServletRequest</code> asociado con la petición</td>
</tr>
<tr>
       <td><b><code>response</code></b></td>
       <td>el objeto <code>HttpServletResponse</code> asociado con la respuesta</td>
</tr>
<tr>
       <td><b><code>out</code></b></td>
       <td>el <code>Writer</code> empleado para enviar la salida al cliente. La salida de los JSP emplea un <em>buffer</em> que permite que se envíen cabeceras HTTP o códigos de estado aunque ya se haya empezado a escribir en la salida (<code>out</code> no es un <code>PrintWriter</code> sino un objeto de la clase especial <code>JspWriter</code>).</td>
</tr>
<tr>
       <td><b><code>session</code></b></td>
       <td>el objeto <code>HttpSession</code> asociado con la petición actual. En JSP, las sesiones se crean automáticamente, de modo que este objeto está instanciado aunque no se cree explícitamente una sesión.</td>
</tr>
<tr>
       <td><b><code>application</code></b></td>
       <td>el objeto <code>ServletContext</code>, común a todos los servlets de la aplicación web.</td>
</tr>
<tr>
       <td><b><code>config</code></b></td>
       <td>el objeto <code>ServletConfig</code>, empleado para leer parámetros de inicialización. </td>
</tr>
<tr>
       <td><b><code>pageContext</code></b></td>
       <td>permite acceder desde un único objeto a todos los demás objetos implícitos </td>
</tr>
<tr>
       
      <td height="82"><b><code>page</code></b></td>
       
      <td height="82">referencia al propio servlet generado (tiene el mismo valor 
        que <code>this</code>).Como tal, en Java no tiene demasiado sentido utilizarla, 
        pero está pensada para el caso en que se utilizara un lenguaje de programación 
        distinto.</td>
</tr>
<tr>
       
      <td height="82"><b><code>exception</code></b></td>
       
      <td height="82">Representa un error producido en la aplicación. Solo es accesible si la página se ha designado como página de error (mediante la directiva <code>page isErrorPage</code>).</td>
</tr>
<caption> <b>Tabla 1: Objetos implícitos de JSP. </b></caption>
</table>
  <p></p>
</center>
<div align="left">
  <center>
    <p></p>
  </center>
  <h2> 1.5. Directivas de página </h2>
  <p> Las <i>directivas</i> influyen en la estructura que tendrá el servlet generado 
    a partir de la página JSP. Hay tres tipos de directivas: </p>
  <ul>
    <li><code>page</code>: tiene varios usos: importar clases de Java, fijar el 
      tipo MIME de la respuesta, controlar el <i>buffer</i> de salida,...</li>
    <li><code>include</code>: sirve para incluir c&oacute;digo en la p&aacute;gina 
      <i>antes de que se realice la compilaci&oacute;n del JSP</i>.</li>
    <li><code>taglib</code>: se emplea cuando el JSP hace uso de etiquetas definidas 
      por el usuario.</li>
  </ul>
  <p>El formato gen&eacute;rico de una directiva es:</p>
  <pre class="codigo">&lt;%@ directiva atributo=&quot;valor&quot; %&gt;
</pre>
  <p> algunas directivas admiten m&aacute;s de un atributo.</p>
  <h3>1.5.1. La directiva <code>page</code></h3>
  <p>La tabla 2 recoge los distintos atributos que admite la directiva <code>page</code> 
    y su significado.</p>
  <table  border="1" cellpadding="5" width="100%">
    <caption>
    <b>Tabla 2: atributos de la directiva page</b>
    </caption>
    <tr> 
      <th width="15%">Atributo</th>
      <th width="38%">Significado</th>
      <th width="47%">Ejemplo</th>
    </tr>
    <tr> 
      <td width="15%"><code>import</code></td>
      <td width="38%">el equivalente a una sentencia <code>import</code> de Java</td>
      <td width="47%"><code>&lt;%@ page import=&quot;java.util.Date&quot; %&gt;</code></td>
    </tr>
    <tr> 
      <td width="15%"><code>contentType</code></td>
      <td width="38%">genera una cabecera HTTP <code>Content-Type</code></td>
      <td width="47%"><code>&lt;%@ page contentType=&quot;text/plain&quot; %&gt;</code></td>
    </tr>
    <tr> 
      <td width="15%"><code>isThreadSafe</code></td>
      <td width="38%">si es <code>false</code>, el servlet generado implementar&aacute; 
        el interface <code>SingleThreadModel</code> (&uacute;n &uacute;nico hilo 
        para todas las peticiones). Por defecto, el valor es <code>true</code>.</td>
      <td width="47%">&nbsp;</td>
    </tr>
    <tr> 
      <td width="15%"><code>session</code></td>
      <td width="38%">Si es <code>false</code>, no se crear&aacute; un objeto 
        <code>session</code> de manera autom&aacute;tica. Por defecto, es <code>true</code>.</td>
      <td width="47%">&nbsp;</td>
    </tr>
    <tr> 
      <td width="15%"><code>buffer</code></td>
      <td width="38%">Define el tama&ntilde;o del <i>buffer</i> para la salida 
        (en kb), o <code>none</code> si no se desea <i>buffer</i>. Su existencia 
        permite generar cabeceras HTTP o c&oacute;digos de estado aunque ya se 
        haya comenzado a escribir la salida.</td>
      <td width="47%"><code>&lt;%@ page buffer=&quot;64kb&quot; %&gt;</code></td>
    </tr>
    <tr> 
      <td width="15%"><code>autoflush</code></td>
      <td width="38%">Si es <code>true</code> (valor por defecto), el buffer se 
        envía automáticamente a la salida al llenarse. Si es <code>false</code>, 
        al llenarse el buffer se genera una excepción.</td>
      <td width="47%">&nbsp;</td>
    </tr>
    <tr> 
      <td width="15%"><code>extends</code></td>
      <td width="38%">Permite especificar de qué clase debe descender el servlet 
        generado a partir de la página JSP. No es habitual cambiarlo.</td>
      <td width="47%">&nbsp;</td>
    </tr>
    <tr> 
      <td width="15%"><code>info</code></td>
      <td width="38%">define una cadena que puede obtenerse a través del método 
        <code>getServletInfo</code></td>
      <td width="47%"><code>&lt;%@ page info="carro de la compra" %&gt;</code></td>
    </tr>
    <tr> 
      <td width="15%"><code>errorPage</code></td>
      <td width="38%">especifica la página JSP que debe procesar los errores generados 
        y no capturados en la actual.</td>
      <td width="47%"><code>&lt;%@ page errorPage="error.jsp" %&gt;</code></td>
    </tr>
    <tr> 
      <td width="15%"><code>isErrorPage</code></td>
      <td width="38%">Si es <code>true</code>, indica que la página actúa como 
        página de error para otro JSP. El valor por defecto es <code>false</code>.</td>
      <td width="47%">&nbsp;</td>
    </tr>
    <tr> 
      <td width="15%"><code>language</code></td>
      <td width="38%">Permite especificar el lenguaje de programación usado en 
        el JSP. En la práctica, el lenguaje siempre es Java, por lo que esta directiva 
        no se usa.</td>
      <td width="47%">&nbsp;</td>
    </tr>
    <tr> 
      <td width="15%"><code>pageEncoding</code></td>
      <td width="38%">define el juego de caracteres que usa la página. El valor 
        por defecto es <code>ISO-8859-1</code>.</td>
      <td width="47%">&nbsp;</td>
    </tr>
  </table>
  <h2>1.6. Acciones</h2>
  <p>En JSP existen varios mecanismos para incluir elementos externos en la página 
    actual o redirigir la petición hacia otra página</p>
  <ul>
    <li><b>La directiva <code>include</code></b> permite insertar código en la 
      página antes de que ésta se transforme en un servlet. De este modo se pueden 
      reutilizar fragmentos de código JSP o HTML. </li>
    <li><b>La acción <code>&lt;jsp:include&gt;</code></b></li>
    permite insertar la salida de otra página JSP. Nótese que se incluye la <em>salida</em> 
    generada por el código JSP, no el código propiamente dicho. 
    <li><b>La acción <code>&lt;jsp:plugin&gt;</code></b> permite incluir <em>applets</em> 
      que hagan uso de Java 2. </li>
    <li><b>La acción <code>&lt;jsp:forward&gt;</code></b> sirve para redirigir 
      la petición a otra página JSP</li>
  </ul>
  <h3>1.6.1. La directiva <code>include</code> </h3>
  <p>Es el equivalente al <code>#include</code> del lenguaje C. su sintaxis es: 
  </p>
  <pre class="codigo">
&lt;%@ include file="<var>fichero</var>" %&gt;
</pre>
  <p> Como el código se incluye en el servlet generado, los fragmentos de código 
    incluidos pueden tener efecto sobre la página actual. Así, se puede utilizar 
    esta directiva para definir constantes, generar cabeceras HTTP, ... </p>
  <p> El problema de esta directiva es que el estándar no exige que el contenedor 
    JSP detecte de manera automática los cambios en los ficheros incluidos, de 
    manera que si cambia uno de ellos puede ser necesario forzar la recompilación 
    de las páginas JSP que los incluyan. </p>
  <p> La especificación JSP recomienda que si la página incluida no es una página 
    JSP válida por sí sola (por ejemplo, porque utiliza variables que se confía 
    que se hayan declarado previamente) se utilice la extensión "estándar" <code>.jspf 
    </code>(JSP fragment) y se coloque en un directorio no público del contenedor 
    JSP (por ejemplo, WEB-INF, que no es accesible desde el cliente, pero sí desde 
    la directiva). </p>
  <h3>1.6.2. La acción <code>&lt;jsp:include&gt;</code> </h3>
  <p> Esta acción incluye en una página la salida generada por otra perteneciente 
    a la misma aplicación web. La petición se redirige a la página incluida, y 
    la respuesta que genera se incluye en la generada por la principal. Su sintaxis 
    es: 
  <pre class="codigo">
&lt;jsp:include page="<var>URL relativa</var>" flush="<var>true</var>|<var>false</var>"/&gt;
</pre>
  <p> El atributo <code>flush</code> especifica si el flujo de salida de la página 
    principal debería ser enviado al cliente antes de enviar el de la página incluida. 
    En JSP 1.2 este atributo es optativo, y su valor por defecto es <code>false</code>. 
    En JSP 1.1 es obligatorio y siempre debía valer <code>true</code> (el forzar 
    el vaciado de buffer era problemático porque una vez que ha sucedido esto 
    no se pueden hacer redirecciones ni ir a páginas de error, ya que ya se han 
    terminado de escribir las cabeceras). </p>
  <p> Esta acción presenta la ventaja sobre la directiva del mismo nombre de que 
    cambios en la página incluida no obligan a recompilar la "principal". No obstante, 
    la página incluida solo tiene acceso al <code>JspWriter</code> de la "principal" 
    y no puede generar cabeceras (por ejemplo, no puede crear <em>cookies</em>). 
  </p>
  <p> Por defecto, la petición que se le pasa a la página incluida es la original, 
    pero se le pueden agregar parámetros adicionales, mediante la etiqueta <code>jsp:param</code>. 
    Por ejemplo: </p>
  <pre class="codigo">
&lt;jsp:include page="cabecera.jsp"&gt;
   &lt;jsp:param name="color" value="YELLOW" /&gt;
&lt;/jsp:include&gt;
</pre>
  <h3>1.6.3. La acción <code>&lt;jsp:plugin&gt;</code></h3>
  <p> Esta acción sirve para incluir, de manera portable e independiente del navegador, 
    <em>applets</em> que utilicen alguna librería de Java 2 (Swing, colecciones, 
    Java 2D, ...), ya que las máquinas virtuales Java distribuidas con algunos 
    navegadores relativamente antiguos (Explorer 5.x, Netscape 4.x,...) son de 
    una versión anterior a Java 2. </p>
  <h3>1.6.4. La acción <code>&lt;jsp:forward&gt;</code></h3>
  <p> Esta acción se utiliza para redirigir la petición hacia otra página JSP 
    que esté en la misma aplicación web que la actual. Un ejemplo de su sintaxis 
    básica es: 
  <pre class="codigo">
&lt;jsp:forward page="principal.jsp"/&gt;
</pre>
  <p>La salida generada hasta el momento por la p&aacute;gina actual se descarta 
    (se borra el buffer). En caso de que no se utilizara buffer de salida, se 
    producir&iacute;a una excepci&oacute;n.</p>
  <p>Al igual que en el caso de <code>&lt;jsp:include&gt;</code>, se pueden añadir 
    parámetros a la petición original para que los reciba la nueva página JSP: 
  </p>
  <pre class="codigo">
&lt;jsp:forward page="principal.jsp"&gt;
   &lt;jsp:param name="privilegios" value="root" /&gt;
&lt;/jsp:forward&gt;</pre>
</div>
</body>
</html>
